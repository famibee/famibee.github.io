<!doctype html><html ⚡>
<head>
	<meta charset="utf-8">
	<title>SKYNovel タグリファレンス Tag Reference</title>
	<link rel="canonical" href="hello-world.html">
	<meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">
	<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
	<script async src="https://cdn.ampproject.org/v0.js"></script>
 </head>
 <body>
	<h1>SKYNovel タグリファレンス Tag Reference</h1>
	<p><a href="https://creativecommons.org/licenses/by/4.0/" rel="nofollow"><img src="https://camo.githubusercontent.com/45b46deab81a0adb3164212be341f1dd65111cf3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d43432532304259253230342e302d6c69676874677265792e737667" alt="License: CC BY 4.0" data-canonical-src="https://img.shields.io/badge/License-CC%20BY%204.0-lightgrey.svg" style="max-width:100%;"></a></p>
	<ul>
		<li>
			<p>変数操作</p>
			<ul>
				<li><a href="#let">[let] 変数代入・演算</a></li>
				<li><a href="#let_abs">[let_abs] 絶対値</a></li>
				<li><a href="#let_char_at">[let_char_at] 文字列から一字取りだし</a></li>
				<li><a href="#let_index_of">[let_index_of] 文字列で検索</a></li>
				<li><a href="#let_length">[let_length] 文字列の長さ</a></li>
				<li><a href="#let_ml">[let_ml] インラインテキスト代入</a></li>
				<li><a href="#let_replace">[let_replace] 正規表現で置換</a></li>
				<li><a href="#let_round">[let_round] 四捨五入</a></li>
				<li><a href="#let_search">[let_search] 正規表現で検索</a></li>
				<li><a href="#let_substr">[let_substr] 文字列から抜きだし</a></li>
			</ul>
		</li>
		<li>
			<p>プラグイン</p>
			<ul>
				<li><a href="#notice">[notice] humane.js 通知パネル</a></li>
			</ul>
		</li>
		<li>
			<p>レイヤ共通</p>
			<ul>
				<li><a href="#add_lay">[add_lay] レイヤを追加する</a></li>
				<li><a href="#clear_lay">[clear_lay] レイヤ設定の消去</a></li>
				<li><a href="#finish_trans">[finish_trans] トランス強制終了</a></li>
				<li><a href="#lay">[lay] レイヤ設定</a></li>
				<li><a href="#trans">[trans] ページ裏表を交換</a></li>
				<li><a href="#wt">[wt] トランス終了待ち</a></li>
			</ul>
		</li>
		<li>
			<p>レイヤトゥイーン</p>
			<ul>
				<li><a href="#pause_tsy">[pause_tsy] 一時停止</a></li>
				<li><a href="#resume_tsy">[resume_tsy] 一時停止再開</a></li>
				<li><a href="#stop_tsy">[stop_tsy] トゥイーン中断</a></li>
				<li><a href="#tsy">[tsy] トゥイーン開始</a></li>
				<li><a href="#wait_tsy">[wait_tsy] トゥイーン終了待ち</a></li>
			</ul>
		</li>
		<li>
			<p>文字・文字レイヤ</p>
			<ul>
				<li><a href="#autowc">[autowc] 文字ごとのウェイト</a></li>
				<li><a href="#ch">[ch] 文字を追加する</a></li>
				<li><a href="#clear_text">[clear_text] 文字消去</a></li>
				<li><a href="#current">[current] デフォルト文字レイヤ設定</a></li>
				<li><a href="#endlink">[endlink] ハイパーリンクの終了</a></li>
				<li><a href="#er">[er] ページ両面の文字消去</a></li>
				<li><a href="#graph">[graph] インライン画像表示</a></li>
				<li><a href="#link">[link] ハイパーリンク</a></li>
				<li><a href="#r">[r] 改行</a></li>
				<li><a href="#rec_ch">[rec_ch] 履歴書き込み</a></li>
				<li><a href="#rec_r">[rec_r] 履歴改行</a></li>
				<li><a href="#reset_rec">[reset_rec] 履歴リセット</a></li>
				<li><a href="#ruby2">[ruby2] 文字列と複数ルビの追加</a></li>
				<li><a href="#set_focus">[set_focus] 未作成：フォーカス移動</a></li>
				<li><a href="#span">[span] インラインスタイル設定</a></li>
				<li><a href="#tcy">[tcy] 縦中横を表示する</a></li>
			</ul>
		</li>
		<li>
			<p>画像・画像レイヤ</p>
			<ul>
				<li><a href="#add_face">[add_face] 差分画像の追加</a></li>
			</ul>
		</li>
		<li>
			<p>HTMLフレーム</p>
			<ul>
				<li><a href="#add_frame">[add_frame] フレーム</a></li>
				<li><a href="#let_frame">[let_frame] フレーム</a></li>
				<li><a href="#set_frame">[set_frame] フレーム</a></li>
				<li><a href="#frame">[frame] フレーム</a></li>
				<li><a href="#tsy_frame">[tsy_frame] フレーム</a></li>
			</ul>
		</li>
		<li>
			<p>イベント</p>
			<ul>
				<li><a href="#clear_event">[clear_event] イベントを全消去</a></li>
				<li><a href="#enable_event">[enable_event] イベント有無の切替</a></li>
				<li><a href="#event">[event] イベントを予約</a></li>
				<li><a href="#l">[l] 行末クリック待ち</a></li>
				<li><a href="#p">[p] 改ページクリック待ち</a></li>
				<li><a href="#s">[s] 停止する</a></li>
				<li><a href="#set_cancel_skip">[set_cancel_skip] スキップ中断予約</a></li>
				<li><a href="#wait">[wait] ウェイトを入れる</a></li>
				<li><a href="#waitclick">[waitclick] クリックを待つ</a></li>
			</ul>
		</li>
		<li>
			<p>ＢＧＭ・効果音</p>
			<ul>
				<li><a href="#fadebgm">[fadebgm] BGMのフェード</a></li>
				<li><a href="#fadeoutbgm">[fadeoutbgm] BGMのフェードアウト</a></li>
				<li><a href="#fadeoutse">[fadeoutse] 効果音のフェードアウト</a></li>
				<li><a href="#fadese">[fadese] 効果音のフェード</a></li>
				<li><a href="#playbgm">[playbgm] BGM の演奏</a></li>
				<li><a href="#playse">[playse] 効果音の再生</a></li>
				<li><a href="#stop_allse">[stop_allse] 全効果音再生の停止</a></li>
				<li><a href="#stopbgm">[stopbgm] BGM 演奏の停止</a></li>
				<li><a href="#stopfadese">[stopfadese] 音声フェードの停止</a></li>
				<li><a href="#stopse">[stopse] 効果音再生の停止</a></li>
				<li><a href="#volume">[volume] 音量設定</a></li>
				<li><a href="#wb">[wb] BGM フェードの終了待ち</a></li>
				<li><a href="#wf">[wf] 効果音フェードの終了待ち</a></li>
				<li><a href="#wl">[wl] BGM 再生の終了待ち</a></li>
				<li><a href="#ws">[ws] 効果音再生の終了待ち</a></li>
				<li><a href="#xchgbuf">[xchgbuf] 再生トラックの交換</a></li>
			</ul>
		</li>
		<li>
			<p>条件分岐</p>
			<ul>
				<li><a href="#else">[else] その他ifブロック開始</a></li>
				<li><a href="#elsif">[elsif] 別条件のifブロック開始</a></li>
				<li><a href="#endif">[endif] ifブロックの終端</a></li>
				<li><a href="#if">[if] ifブロックの開始</a></li>
			</ul>
		</li>
		<li>
			<p>ラベル・ジャンプ</p>
			<ul>
				<li><a href="#button">[button] ボタンを表示</a></li>
				<li><a href="#call">[call] サブルーチンコール</a></li>
				<li><a href="#jump">[jump] シナリオジャンプ</a></li>
				<li><a href="#pop_stack">[pop_stack] コールスタック破棄</a></li>
				<li><a href="#return">[return] サブルーチンから戻る</a></li>
			</ul>
		</li>
		<li>
			<p>マクロ</p>
			<ul>
				<li><a href="#bracket2macro">[bracket2macro] 括弧マクロの定義</a></li>
				<li><a href="#break_macro">[break_macro] マクロから脱出</a></li>
				<li><a href="#char2macro">[char2macro] 一文字マクロの定義</a></li>
				<li><a href="#endmacro">[endmacro] マクロ定義の終了</a></li>
				<li><a href="#macro">[macro] マクロ定義の開始</a></li>
			</ul>
		</li>
		<li>
			<p>しおり</p>
			<ul>
				<li><a href="#copybookmark">[copybookmark] しおりの複写</a></li>
				<li><a href="#erasebookmark">[erasebookmark] しおりの消去</a></li>
				<li><a href="#load">[load] しおりの読込</a></li>
				<li><a href="#record_place">[record_place] セーブポイント指定</a></li>
				<li><a href="#reload_script">[reload_script] スクリプト再読込</a></li>
				<li><a href="#save">[save] しおりの保存</a></li>
			</ul>
		</li>
		<li>
			<p>画面揺らし</p>
			<ul>
				<li><a href="#quake">[quake] 画面を揺らす</a></li>
				<li><a href="#stop_quake">[stop_quake] 画面揺らし中断</a></li>
				<li><a href="#wq">[wq] 画面揺らし終了待ち</a></li>
			</ul>
		</li>
		<li>
			<p>システム</p>
			<ul>
				<li><a href="#close">[close] アプリの終了</a></li>
				<li><a href="#loadplugin">[loadplugin] プラグインの読み込み</a></li>
				<li><a href="#navigate_to">[navigate_to] ＵＲＬを開く</a></li>
				<li><a href="#snapshot">[snapshot] スナップショット</a></li>
				<li><a href="#title">[title] タイトル指定</a></li>
				<li><a href="#toggle_full_screen">[toggle_full_screen] 全画面状態切替</a></li>
				<li><a href="#window">[window] アプリウインドウ設定</a></li>
			</ul>
		</li>
		<li>
			<p>デバッグ・その他</p>
			<ul>
				<li><a href="#clearsysvar">[clearsysvar] システム変数の全消去</a></li>
				<li><a href="#clearvar">[clearvar] ゲーム変数の全消去</a></li>
				<li><a href="#dump_val">[dump_val] 変数のダンプ</a></li>
				<li><a href="#dump_script">[dump_script] スクリプトのダンプ</a></li>
				<li><a href="#dump_stack">[dump_stack] スタックのダンプ</a></li>
				<li><a href="#log">[log] ログ出力</a></li>
				<li><a href="#dump_lay">[dump_lay] レイヤのダンプ</a></li>
				<li><a href="#stats">[stats] パフォーマンス表示</a></li>
				<li><a href="#trace">[trace] デバッグ表示へ出力</a></li>
			</ul>
		</li>
	</ul>
	<h1><a id="プラグイン" class="anchor" aria-hidden="true" href="#プラグイン"></a>プラグイン</h1>
	<p><a id="notice"></a></p>
	<h2><a id="notice-humanejs-通知パネル" class="anchor" aria-hidden="true" href="#notice-humanejs-通知パネル"></a><a
		 href="#notice">[notice] humane.js 通知パネル</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="変数操作" class="anchor" aria-hidden="true" href="#変数操作"></a>変数操作</h1>
	<p><a id="clearsysvar"></a></p>
	<h2><a id="clearsysvar-システム変数の全消去" class="anchor" aria-hidden="true" href="#clearsysvar-システム変数の全消去"></a><a
		 href="#clearsysvar">[clearsysvar] システム変数の全消去</a></h2>
	<p>引数無し。<br>
		【sys:〜】系の変数を消去。<br>
		削除すると言うより、初期化する</p>
	<hr>
	<p><a id="clearvar"></a></p>
	<h2><a id="clearvar-ゲーム変数の全消去" class="anchor" aria-hidden="true" href="#clearvar-ゲーム変数の全消去"></a><a href="#clearvar">[clearvar]
			ゲーム変数の全消去</a></h2>
	<p>引数無し。
		【？？？:〜】系の変数を消去。<br>
		削除すると言うより、初期化する</p>
	<hr>
	<p><a id="let"></a></p>
	<h2><a id="let-変数代入演算" class="anchor" aria-hidden="true" href="#let-変数代入演算"></a><a href="#let">[let]
			変数代入・演算</a></h2>
	<pre><code>変数に値を代入する。
</code></pre>
	<p>変数については「<a href="/famibee/SKYNovel/blob/master/VAR.md">SKYNovel 組み込み変数</a>」を参照して下さい</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>変数名</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>セットする値</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td>（コメントを参照）</td>
				<td>値をセットする際の型。<br>num……数値（実数）。「01」は数値の1となる。<br>int……数値（符合付き整数）<br>uint……数値（符合なし整数）<br>bool……Boolean<br>str……文字列。「01」は「01」のまま。</td>
			</tr>
		</tbody>
	</table>
	<p>[let]を使わない、より簡潔な記述文法があります。（ver 3.18以降）
		※condのような条件分岐、「=aaa|0x0」のような省略記法はできません。</p>
	<p>以下の記述は、
		[let name=a text=1]
		[let name="b" text=2]
		[let name=ret text="&amp;a + b"]（文字列ではなく計算の場合、右辺に&amp;をつける）
		[let name="&amp;'ret'+ a" text="&amp;1 + b"]（左辺で&amp;を使える）
		以下のようにも書けます。（&amp;から改行かタブまでを[let]文と解釈します）
		&amp;a=1
		&amp;b=2
		&amp;ret = a + b（このように、右辺の&amp;は省略します。常に&amp;がついているイメージ）
		&amp;&amp;'tst' + a = 1+b（左辺で&amp;を使える。&amp;ret1 = 1 + b と同じ）</p>
	<p>キャストも記述できます。（両者は同じ意味）
		[let name=ret text=&amp;1+2 cast=int]（結果は3。1+2の計算結果が入る）
		&amp;ret=1+2=int（同上）</p>
	<p>キャスト動作そのものは、以下のとおり。
		&amp;num = '0+1' = int（結果は0、文字列「0+1」を計算せず文字列のまま、数値に変換できないため）
		&amp;num = 0+1 = int（結果は1、0+1という計算結果をintで変数へ）
		&amp;txt = '0+1' = str（結果は文字列「0+1」、文字列をそのまま変数に）
		&amp;txt = 0+1 = str（結果は文字列「1」、0+1を計算してから結果1を文字列「1」として変数に）</p>
	<hr>
	<p><a id="let_abs"></a></p>
	<h2><a id="let_abs-絶対値" class="anchor" aria-hidden="true" href="#let_abs-絶対値"></a><a href="#let_abs">[let_abs]
			絶対値</a></h2>
	<pre><code>絶対値を求める
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>変数名</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>Number</td>
				<td>絶対値を求める数</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td></td>
				<td>値をセットする際の型。（詳細は[let]を参照）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_char_at"></a></p>
	<h2><a id="let_char_at-文字列から一字取りだし" class="anchor" aria-hidden="true" href="#let_char_at-文字列から一字取りだし"></a><a
		 href="#let_char_at">[let_char_at] 文字列から一字取りだし</a></h2>
	<pre><code>文字列中の一文字を取り出す
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>変数名</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>元になる文字列</td>
			</tr>
			<tr>
				<td>pos</td>
				<td></td>
				<td>0</td>
				<td>0（先頭）〜</td>
				<td>何番目の文字を取り出すか</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td></td>
				<td>値をセットする際の型。（詳細は[let]を参照）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_index_of"></a></p>
	<h2><a id="let_index_of-文字列で検索" class="anchor" aria-hidden="true" href="#let_index_of-文字列で検索"></a><a href="#let_index_of">[let_index_of]
			文字列で検索</a></h2>
	<pre><code>文字列内を検索し、文字列内の start 以降で、最初に val が見つかった位置を返します。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>位置を代入する変数名。-1の場合は見つからなかった</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>元になる文字列</td>
			</tr>
			<tr>
				<td><strong>val</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>探す文字列</td>
			</tr>
			<tr>
				<td>start</td>
				<td></td>
				<td>0</td>
				<td>0（先頭）〜</td>
				<td>検索を開始する位置</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td></td>
				<td>値をセットする際の型。（詳細は[let]を参照）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_length"></a></p>
	<h2><a id="let_length-文字列の長さ" class="anchor" aria-hidden="true" href="#let_length-文字列の長さ"></a><a href="#let_length">[let_length]
			文字列の長さ</a></h2>
	<pre><code>文字列の長さを求める
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>長さを代入する変数名</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>長さを求める文字列。長さをセットする</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td></td>
				<td>値をセットする際の型。（詳細は[let]を参照）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_ml"></a></p>
	<h2><a id="let_ml-インラインテキスト代入" class="anchor" aria-hidden="true" href="#let_ml-インラインテキスト代入"></a><a href="#let_ml">[let_ml]
			インラインテキスト代入</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_replace"></a></p>
	<h2><a id="let_replace-正規表現で置換" class="anchor" aria-hidden="true" href="#let_replace-正規表現で置換"></a><a href="#let_replace">[let_replace]
			正規表現で置換</a></h2>
	<pre><code>文字列を正規表現で検索し、マッチする箇所を文字列で置き換える。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>変数名</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>置換対象の文字列</td>
			</tr>
			<tr>
				<td><strong>reg</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>正規表現</td>
			</tr>
			<tr>
				<td>flags</td>
				<td></td>
				<td>（なし）</td>
				<td>String</td>
				<td>正規表現のフラグ</td>
			</tr>
			<tr>
				<td><strong>val</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>置き換える文字列</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td></td>
				<td>値をセットする際の型。（詳細は[let]を参照）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_round"></a></p>
	<h2><a id="let_round-四捨五入" class="anchor" aria-hidden="true" href="#let_round-四捨五入"></a><a href="#let_round">[let_round]
			四捨五入</a></h2>
	<pre><code>四捨五入する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>変数名</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>Number</td>
				<td>四捨五入する数</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td></td>
				<td>値をセットする際の型。（詳細は[let]を参照）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_search"></a></p>
	<h2><a id="let_search-正規表現で検索" class="anchor" aria-hidden="true" href="#let_search-正規表現で検索"></a><a href="#let_search">[let_search]
			正規表現で検索</a></h2>
	<pre><code>文字列内を正規表現で検索し、最初に val が見つかった位置を返します。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>変数名</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>検索対象の文字列</td>
			</tr>
			<tr>
				<td><strong>reg</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>正規表現</td>
			</tr>
			<tr>
				<td>flags</td>
				<td></td>
				<td>（なし）</td>
				<td>String</td>
				<td>正規表現のフラグ</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td></td>
				<td>値をセットする際の型。（詳細は[let]を参照）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_substr"></a></p>
	<h2><a id="let_substr-文字列から抜きだし" class="anchor" aria-hidden="true" href="#let_substr-文字列から抜きだし"></a><a
		 href="#let_substr">[let_substr] 文字列から抜きだし</a></h2>
	<pre><code>文字列の一部を取り出す
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String（変数名書式※）</td>
				<td>変数名</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>元になる文字列</td>
			</tr>
			<tr>
				<td>pos</td>
				<td></td>
				<td>0</td>
				<td>0（先頭）〜<br>または<br>〜-1（末尾）</td>
				<td>何番目の文字から取り出すか。<br>負の値なら「後ろから何個目か」。-1が最後の文字。<br>【pos=-3 len=all】とすると、後ろから３文字を取り出す。</td>
			</tr>
			<tr>
				<td>len</td>
				<td></td>
				<td>1</td>
				<td>文字数、または all</td>
				<td>何文字取り出すか。all でpos以降の全て</td>
			</tr>
			<tr>
				<td>cast</td>
				<td></td>
				<td>出来るだけ数値変換</td>
				<td></td>
				<td>値をセットする際の型。（詳細は[let]を参照）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="レイヤ共通" class="anchor" aria-hidden="true" href="#レイヤ共通"></a>レイヤ共通</h1>
	<p><a id="add_lay"></a></p>
	<h2><a id="add_lay-レイヤを追加する" class="anchor" aria-hidden="true" href="#add_lay-レイヤを追加する"></a><a href="#add_lay">[add_lay]
			レイヤを追加する</a></h2>
	<pre><code>レイヤを追加する。
</code></pre>
	<p>レイヤはページの裏表があり、文字レイヤや画像レイヤなどの種類があります。
		※HTMLレイヤのみ、Flash環境では使用不可です。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>layer</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>レイヤ名を指定する。<br>未使用のレイヤ名でなければエラー＆アプリ停止</td>
			</tr>
			<tr>
				<td><strong>class</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>grp（画像レイヤ）、<br>txt（文字レイヤ）、<br>またはプラグインで追加した値</td>
				<td>レイヤの種類</td>
			</tr>
		</tbody>
	</table>
	<h3><a id="blendmodeの解説" class="anchor" aria-hidden="true" href="#blendmodeの解説"></a>blendModeの解説</h3>
	<p>[lay][add_face][button]で同様ですが、blendmode属性に以下のものを使用可能です。</p>
	<p>Photoshop<br>ブレンドモード名 | AIRNovel<br>での<br>blendmode<br>属性の値 | ActionScript<br>での<br>blendmode<br>値 | コメント
		-- | -- | -- | -- | --
		加算 | （使えない） | add | 表示オブジェクトの要素カラーの値を背景色に加算し、その際に上限 | 0xFF を適用します。</p>
	<hr>
	<p><a id="clear_lay"></a></p>
	<h2><a id="clear_lay-レイヤ設定の消去" class="anchor" aria-hidden="true" href="#clear_lay-レイヤ設定の消去"></a><a href="#clear_lay">[clear_lay]
			レイヤ設定の消去</a></h2>
	<pre><code>画像や文字などレイヤ状態をクリアする。
</code></pre>
	<p>alpha、blendMode、rotation、scaleX、scaleYを初期値にする<br>
		※背景や背景画像はクリアしません（b_left、b_top、b_width、b_height、b_color、b_alpha）
		　クリアしたい場合は、[lay back_clear=true]</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>全てのレイヤ</td>
				<td>レイヤ名（半角カンマ区切りで複数レイヤを指定可能）</td>
				<td></td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back、both</td>
				<td>ページの裏表（both指定で両面）</td>
			</tr>
			<tr>
				<td>filter</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>true：フィルタもクリア</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="finish_trans"></a></p>
	<h2><a id="finish_trans-トランス強制終了" class="anchor" aria-hidden="true" href="#finish_trans-トランス強制終了"></a><a
		 href="#finish_trans">[finish_trans] トランス強制終了</a></h2>
	<p>引数無し。<br>
		[trans]で開始したトランス終了を待たず、すぐ終了させる。<br>
		終了次第、スクリプト処理を次へ進める</p>
	<hr>
	<p><a id="lay"></a></p>
	<h2><a id="lay-レイヤ設定共通" class="anchor" aria-hidden="true" href="#lay-レイヤ設定共通"></a><a href="#lay">[lay]
			レイヤ設定(共通)</a></h2>
	<pre><code>レイヤに各種設定を行う。
</code></pre>
	<p>レイヤの種類ごとに使用できる属性が違う</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>layer</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>レイヤ名</td>
				<td>処理対象のレイヤ</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td>visible</td>
				<td></td>
				<td>現在値</td>
				<td>Boolean</td>
				<td>true：表示、false：非表示</td>
			</tr>
			<tr>
				<td>alpha</td>
				<td></td>
				<td>1.0</td>
				<td>0.0〜1.0（実数）</td>
				<td>レイヤの透過度。0（完全透明）〜0.5（半透明）〜1（不透明）</td>
			</tr>
			<tr>
				<td>blendmode</td>
				<td></td>
				<td>何もしない</td>
				<td>ブレンドモード名（"screen"など）</td>
				<td>このレイヤと下のレイヤとの重なりにおいて、<br>ドット単位で色のブレンド演算を行なう。<br>詳細はblendModeの解説を参照。</td>
			</tr>
			<tr>
				<td>pos</td>
				<td></td>
				<td>c※</td>
				<td>c、l、r、横座標</td>
				<td>主に立ち絵に使う。横と縦座標を同時に設定する。<br>横座標は指定した値（文字cの場合は画面中央、lは左寄り、rは右寄り）に設定し、画像下端を画面下端に接するように自動計算する。</td>
			</tr>
			<tr>
				<td>left</td>
				<td></td>
				<td>0</td>
				<td>画面左上を(0, 0)とする横座標※</td>
				<td>レイヤやボタン左端の画面左端からの距離</td>
			</tr>
			<tr>
				<td>center</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>レイヤやボタン中央の画面左端からの距離</td>
			</tr>
			<tr>
				<td>right</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>レイヤやボタン右端の画面左端からの距離</td>
			</tr>
			<tr>
				<td>s_right</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>レイヤやボタン右端の画面右端からの距離</td>
			</tr>
			<tr>
				<td>top</td>
				<td></td>
				<td>0</td>
				<td>画面左上を(0, 0)とする縦座標※</td>
				<td>レイヤやボタン上端の画面上端からの距離</td>
			</tr>
			<tr>
				<td>middle</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>レイヤやボタン中央の画面上端からの距離</td>
			</tr>
			<tr>
				<td>bottom</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>レイヤやボタン下端の画面上端からの距離</td>
			</tr>
			<tr>
				<td>s_bottom</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>レイヤやボタン下端の画面下端からの距離</td>
			</tr>
			<tr>
				<td>rotation</td>
				<td></td>
				<td>0</td>
				<td>-180〜180</td>
				<td>回転角を度単位で指定。時計回りは0～180、反時計回りは0～-180を指定。 左上を中心に回る</td>
			</tr>
			<tr>
				<td>scale_x</td>
				<td></td>
				<td>1.0</td>
				<td>正負の実数値</td>
				<td>横方向を何倍に拡大／縮小するか。負の値ならレイヤを左右反転</td>
			</tr>
			<tr>
				<td>scale_y</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>縦方向を何倍に拡大／縮小するか。負の値ならレイヤを上下反転</td>
			</tr>
			<tr>
				<td>float</td>
				<td></td>
				<td>何もしない</td>
				<td>Boolean</td>
				<td>true：レイヤを最前面に移動する。<br>※最前面とは、Flashのstage.addChildにおける重なり順</td>
			</tr>
			<tr>
				<td>index</td>
				<td></td>
				<td>何もしない</td>
				<td>0〜</td>
				<td>レイヤをindexで指定したインデックスに移動する。<br>※インデックスは、FlashのStage.setChildIndex()を参照。</td>
			</tr>
			<tr>
				<td>dive</td>
				<td></td>
				<td>何もしない</td>
				<td>レイヤ名</td>
				<td>レイヤをdiveで指定したレイヤのすぐ後ろに潜り込ませる。<br>「plg:プラグイン名」と記述する事でプラグインも指定できる。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="txtlay"></a></p>
	<h2><a id="txtlay-レイヤ設定文字レイヤ" class="anchor" aria-hidden="true" href="#lay-レイヤ設定文字レイヤ"></a><a href="#txtlay">[lay]
			レイヤ設定(文字レイヤ)</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>max_col</td>
				<td></td>
				<td>現在値</td>
				<td>1〜</td>
				<td>ページあたりの表示列数（横書き時は上から下、縦書き時は右から左へ数える）<br>改行・禁則処理に使用。実際に文字が表示されるかは、フォントサイズや表示位置との兼ね合いによる。<br>初期値は 10</td>
			</tr>
			<tr>
				<td>max_row</td>
				<td></td>
				<td>現在値</td>
				<td>1〜</td>
				<td>ページあたりの表示行数。初期値は 10</td>
			</tr>
			<tr>
				<td>bura_col</td>
				<td></td>
				<td>現在値</td>
				<td>0〜</td>
				<td>禁則時ぶら下がり文字数。初期値は 2</td>
			</tr>
			<tr>
				<td>chk_overrow</td>
				<td></td>
				<td>現在値</td>
				<td>Boolean</td>
				<td>true：カーソルがmax_rowを超えたらエラー＆停止（初期値）<br>false：表示行数を越える直前に自動改ページ</td>
			</tr>
			<tr>
				<td>b_left</td>
				<td></td>
				<td>現在値</td>
				<td>画面左上を(0, 0)とする座標</td>
				<td>テキスト背後の矩形表示位置。<br>初期値はそれぞれ 16 16</td>
			</tr>
			<tr>
				<td>b_top</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>b_width</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>矩形表示縦横ピクセル数</td>
				<td>テキスト背後の矩形表示縦横サイズ。<br>初期値はそれぞれ（画面横幅 - b_left *2）（画面縦幅 - b_top *2）</td>
			</tr>
			<tr>
				<td>b_height</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>b_color</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>色指定。0x000000など</td>
				<td>テキスト背後の矩形色。初期値は 0x000000（黒）</td>
			</tr>
			<tr>
				<td>b_alpha</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>実数：0.0（透明）〜1.0（不透過）</td>
				<td>テキスト背後の矩形不透明度。<br>表示しない場合は0を指定。初期値は 0</td>
			</tr>
			<tr>
				<td>b_pic</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>画像ファイル名</td>
				<td>文字レイヤ背後の枠画像を指定する。b_top、b_left、b_alphaの影響を受ける。<br>（これを指定するとb_colorは無視される）</td>
			</tr>
			<tr>
				<td>back_clear</td>
				<td></td>
				<td>現在値</td>
				<td>Boolean</td>
				<td>true：背景をクリアする</td>
			</tr>
			<tr>
				<td>b_alpha_isfixed</td>
				<td></td>
				<td>現在値</td>
				<td>Boolean</td>
				<td>true：テキスト背後の矩形不透明度を、「b_alpha属性と sys:TextLayer.Back.Alpha の掛け算とせず」、b_alpha属性値そのものにする。（これは2017/2/13以前の仕様）</td>
			</tr>
			<tr>
				<td>draggable</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>true：テキスト背後の矩形をドラッグできる</td>
			</tr>
			<tr>
				<td>drag_x</td>
				<td></td>
				<td>0</td>
				<td>画面左上を(0, 0)とする座標</td>
				<td>ドラッグ範囲の左上始点。</td>
			</tr>
			<tr>
				<td>drag_y</td>
				<td></td>
				<td>0</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>drag_w</td>
				<td></td>
				<td>画面横幅</td>
				<td>ドラッグ範囲縦横ピクセル数</td>
				<td>ドラッグ範囲縦横サイズ。</td>
			</tr>
			<tr>
				<td>drag_h</td>
				<td></td>
				<td>画面縦幅</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>dragmove_fn</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>ドラッグ中にサブルーチンコールする先。<br>指定方法は[jump]と同様</td>
			</tr>
			<tr>
				<td>dragmove_label</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>dragmove_arg</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>指定した場合、ドラッグ中コール先で「&amp;const.an.eventArg」にて値を受け取れる</td>
			</tr>
			<tr>
				<td>h_scroll</td>
				<td></td>
				<td></td>
				<td>ピクセル数</td>
				<td>横スクロールさせる量</td>
			</tr>
			<tr>
				<td>v_scroll</td>
				<td></td>
				<td></td>
				<td>ピクセル数</td>
				<td>縦スクロールさせる量</td>
			</tr>
			<tr>
				<td>mouse_wheel_enabled</td>
				<td></td>
				<td></td>
				<td>Boolean</td>
				<td>マウスホイールでスクロール許可するか否か</td>
			</tr>
			<tr>
				<td>layout</td>
				<td></td>
				<td>現在値</td>
				<td>String</td>
				<td>文字レイヤのレイアウトを指定する。<br>文法はFlex SDK 4のTLF (Text Layout Framework)・TextFlowのXML指定による。<br>※「TLFのXML指定」と言われても良く判らないでしょうし、こちらのサイト（Text
					Layout Editor Demo Application - Adobe Labs）で色々いじってみて、下の【Markup...】ボタンで出てくるXMLを参考にして下さい。<br><br>このlayoutという属性の中にTLF属性群を入れ子状に記述する。<br>例えば、blockProgressionで縦書き・横書きを指定できる。<br>設定しないTLF属性は現在値を継続する。<br>初期値は空（から）、全くの未指定。<br><br>駆使すると、「文字表示領域矩形内に自動で文字を並べる」事なども出来ます</td>
			</tr>
			<tr>
				<td>onend</td>
				<td></td>
				<td>現在値</td>
				<td>（コメントで解説）</td>
				<td>行末禁則処理を指定する。（全文字レイヤで設定を共有）<br>warning …… 行末禁則・Warning処理<br>nop …… 何もしない<br>enter …… 行末禁則・追い込み処理<br>leave ……
					行末禁則・追い出し処理（初期値）</td>
			</tr>
			<tr>
				<td>end</td>
				<td></td>
				<td>現在値</td>
				<td>String</td>
				<td>行末禁則処理対象の文字群を指定する。（全文字レイヤで設定を共有）<br>初期値は……［（｛〈「『【〔“〝</td>
			</tr>
			<tr>
				<td>bura</td>
				<td></td>
				<td>現在値</td>
				<td>String</td>
				<td>ぶら下がり処理対象の文字群を指定する。（全文字レイヤで設定を共有）<br>「、」「。」などを連結した文字列。<br>初期値は……<br>、。，．）］｝〉」』】〕”〟ぁぃぅぇぉっゃゅょゎァィゥェォッャュョヮヵヶ！？!?‼⁉・ーゝゞヽヾ々<br>onsplit</td>
			</tr>
			<tr>
				<td>dont_sprit</td>
				<td></td>
				<td>現在値</td>
				<td>String</td>
				<td>分割禁止処理対象の文字群を指定する。（全文字レイヤで設定を共有）<br>初期値は「─（ダーシ）」「‥（二点リーダ）」「…（三点リーダ）」</td>
			</tr>
			<tr>
				<td>r_color</td>
				<td></td>
				<td>現在値</td>
				<td>色指定。0x000000など</td>
				<td>ルビの文字色。初期値は 0xFFFFFF</td>
			</tr>
			<tr>
				<td>r_size</td>
				<td></td>
				<td>現在値</td>
				<td>1〜</td>
				<td>ルビ文字サイズ。初期値は 12</td>
			</tr>
			<tr>
				<td>r_shift</td>
				<td></td>
				<td>現在値</td>
				<td>正負の整数</td>
				<td>ルビ文字を親文字から何ピクセル離すか。<br>値の正負と縦書き横書きの関係は、TLFのBaselineShiftに従う。初期値は 0</td>
			</tr>
			<tr>
				<td>r_align</td>
				<td></td>
				<td>現在値</td>
				<td>（コメントで解説）</td>
				<td>ルビ揃えを指定する。<br>left ……（肩付き）先頭親文字から、ルビ間は密着<br>center ……（中付き）センター合わせ、〃<br>right ……（右／下揃え）末尾親文字から、〃<br>justify
					……（両端揃え）先頭から末尾親文字間に、ルビ間は均等にあける<br>121 ……（1-2-1(JIS)）ルビの前後を比率1、ルビ間を比率2であける<br>even ……（均等アキ）ルビの前後、ルビ間も均等にあける<br>1ruby
					……（1ルビ文字アキ）ルビの前後をルビ一文字空け、ルビ間は均等にあける<br><br>初期値は center。<br><br>※leftやright以外において、親文字よりルビの方が長い場合は、親文字に対する「中付き」表示になる</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="grplay"></a></p>
	<h2><a id="grplay-レイヤ設定画像レイヤ" class="anchor" aria-hidden="true" href="#lay-レイヤ設定画像レイヤ"></a><a href="#grplay">[lay]
			レイヤ設定(画像レイヤ)</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>fn</strong></td>
				<td><strong>y</strong></td>
				<td>何もしない</td>
				<td>画像ファイル名</td>
				<td>基本画像ファイルを指定する</td>
			</tr>
			<tr>
				<td>face</td>
				<td></td>
				<td>何もしない</td>
				<td>[add_face]で登録した差分画像（半角カンマ区切りで複数可能）</td>
				<td>差分画像ファイルを指定する。<br>[fg fn="a" face="b,c,d"]なら「基本a」の上に「差分b」を重ね、「差分c」を重ね、「差分d」を重ねる。<br><br>【注意】fnは同じでface属性だけを指定→指定なしにした場合、表示が変わりませんが不具合ではありません。
					「face属性指定なし」は「何もしない」、つまり変化させないからです。<br>[fg layer=upd fn="a" face="b"]<br>[l]<br>[fg layer=upd fn="a"]<br>[l]<br><br>差分画像を無くしたい場合、明確に空文字（""）を指定します。<br>[fg
					layer=upd fn="a" face="b"]<br>[l]<br>[fg layer=upd fn="a" face=""]<br>[l]</td>
			</tr>
			<tr>
				<td>draggable</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>true：テキスト背後の矩形をドラッグできる</td>
			</tr>
			<tr>
				<td>drag_x</td>
				<td></td>
				<td>0</td>
				<td>画面左上を(0, 0)とする座標</td>
				<td>ドラッグ範囲の左上始点。</td>
			</tr>
			<tr>
				<td>drag_y</td>
				<td></td>
				<td>0</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>drag_w</td>
				<td></td>
				<td>画面横幅</td>
				<td>ドラッグ範囲縦横ピクセル数</td>
				<td>ドラッグ範囲縦横サイズ。</td>
			</tr>
			<tr>
				<td>drag_h</td>
				<td></td>
				<td>画面縦幅</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>dragmove_fn</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>ドラッグ中にサブルーチンコールする先。<br>指定方法は[jump]と同様</td>
			</tr>
			<tr>
				<td>dragmove_label</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>dragmove_arg</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>指定した場合、ドラッグ中コール先で「&amp;const.an.eventArg」にて値を受け取れる</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="trans"></a></p>
	<h2><a id="trans-ページ裏表を交換" class="anchor" aria-hidden="true" href="#trans-ページ裏表を交換"></a><a href="#trans">[trans]
			ページ裏表を交換</a></h2>
	<pre><code>裏ページを表ページとクロスフェードする。
</code></pre>
	<p>クロスフェードを開始すると、終了を待たずに次のタグへと処理を進める。<br>
		終了を待ちたい場合は[wt]を使用する。<br>
		<br>
		クロスフェード終了後は元・裏ページから元・表ページに内容をコピーし、同じ内容になる。<br>
		<br>
		ルール画像は白黒かグレースケールを推奨。（見た目と動きが一致する）<br>
		また[trans]～[wt]間で文字表示や[ch]は動作未定義、非推奨。<br>
		[trans]終了を待たず何かをするのは避けた方がよいでしょう。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>全てのレイヤ</td>
				<td>処理対象レイヤ名（カンマ区切りで複数可能）</td>
				<td>クロスフェードするレイヤ。指定以外のレイヤは変化させない</td>
			</tr>
			<tr>
				<td>time</td>
				<td></td>
				<td>0</td>
				<td>ミリ秒</td>
				<td>変化にかける時間</td>
			</tr>
			<tr>
				<td>delay</td>
				<td></td>
				<td>0</td>
				<td>ミリ秒</td>
				<td>変化する前に待機する遅延時間</td>
			</tr>
			<tr>
				<td>rule</td>
				<td></td>
				<td>画面全体ピクセルで同時にクロスフェードする</td>
				<td>画像ファイル名（swf不可）</td>
				<td>指定した場合はルール画像として、ピクセル単位でクロスフェードするタイミングをずらす。<br>ルール画像の黒いピクセル（と同じ位置にあるピクセル）が先に処理され、白が最後になる。</td>
			</tr>
			<tr>
				<td>vague</td>
				<td></td>
				<td>0.04</td>
				<td>トランジション期間全体を1とした値</td>
				<td>表レイヤと裏レイヤの境界を曖昧にぼかす度合い</td>
			</tr>
			<tr>
				<td>light</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>少々ギザギザだが処理が軽い方法でクロスフェードするか</td>
			</tr>
			<tr>
				<td>c_plugin</td>
				<td></td>
				<td>何もしない</td>
				<td>処理対象プラグイン名（カンマ区切りで複数可能）</td>
				<td>指定したプラグインの可視状態が[trans]で変化するようになる。表示非表示が切り替わる。ただしクロスフェード中はアニメが止まる</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="wt"></a></p>
	<h2><a id="wt-トランス終了待ち" class="anchor" aria-hidden="true" href="#wt-トランス終了待ち"></a><a href="#wt">[wt]
			トランス終了待ち</a></h2>
	<pre><code>[trans]で開始したトランスの終了を待つ。
</code></pre>
	<p>終了次第、スクリプト処理を次へ進める。<br>
		<br>
		また[trans]～[wt]間で文字表示や[ch]は動作未定義、非推奨。<br>
		[trans]終了を待たず何かをするのは避けた方がよいでしょう<br></p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>canskip</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueでクリックキャンセル可能にする。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="レイヤトゥイーン" class="anchor" aria-hidden="true" href="#レイヤトゥイーン"></a>レイヤトゥイーン</h1>
	<p><a id="pause_tsy"></a></p>
	<h2><a id="pause_tsy-一時停止" class="anchor" aria-hidden="true" href="#pause_tsy-一時停止"></a><a href="#pause_tsy">[pause_tsy]
			一時停止</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="resume_tsy"></a></p>
	<h2><a id="resume_tsy-一時停止再開" class="anchor" aria-hidden="true" href="#resume_tsy-一時停止再開"></a><a href="#resume_tsy">[resume_tsy]
			一時停止再開</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="stop_tsy"></a></p>
	<h2><a id="stop_tsy-トゥイーン中断" class="anchor" aria-hidden="true" href="#stop_tsy-トゥイーン中断"></a><a href="#stop_tsy">[stop_tsy]
			トゥイーン中断</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="tsy"></a></p>
	<h2><a id="tsy-トゥイーン開始" class="anchor" aria-hidden="true" href="#tsy-トゥイーン開始"></a><a href="#tsy">[tsy]
			トゥイーン開始</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="wait_tsy"></a></p>
	<h2><a id="wait_tsy-トゥイーン終了待ち" class="anchor" aria-hidden="true" href="#wait_tsy-トゥイーン終了待ち"></a><a href="#wait_tsy">[wait_tsy]
			トゥイーン終了待ち</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="文字文字レイヤ" class="anchor" aria-hidden="true" href="#文字文字レイヤ"></a>文字・文字レイヤ</h1>
	<p><a id="autowc"></a></p>
	<h2><a id="autowc-文字ごとのウェイト" class="anchor" aria-hidden="true" href="#autowc-文字ごとのウェイト"></a><a href="#autowc">[autowc]
			文字ごとのウェイト</a></h2>
	<pre><code>特定の文字の直後に自動的にウェイトを入れる。
</code></pre>
	<p>textに指定した文字に対し、timeに指定した数値が対応する。<br>
		通常の文字表示速度にtimeの数値を掛け算する。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>enabled</td>
				<td></td>
				<td>現在値</td>
				<td>Boolean</td>
				<td>自動ウェイトを有効にするか</td>
			</tr>
			<tr>
				<td>text</td>
				<td>両方同時に指定、或いは省略</td>
				<td>現在値</td>
				<td>String</td>
				<td>ウェイトを指定する文字の集まり</td>
			</tr>
			<tr>
				<td>time</td>
				<td>(↑と同じ)</td>
				<td>現在値</td>
				<td>カンマ区切りの数値</td>
				<td>文字表示ウェイト倍数</td>
			</tr>
		</tbody>
	</table>
	<p>　以下のように指定する。<br>
		[autowc enabled=true text="４５６" time="50,100,150"]<br>
		[autowc enabled=true text="４５６" time="100,100,100"]<br>
		[autowc enabled=false]</p>
	<p>　以下はエラーとなる。<br>
		;x [autowc enabled=true text="４５６" time="100,100"]<br>
		;x [autowc enabled=true text="４５６" time="100,100,100,100"]<br>
		;x [autowc enabled=true text="４５６"]<br>
		;x [autowc enabled=true time="100,100,100"]<br>
		;x [autowc enabled=true]<br>
		;x [autowc enabled=true text="" time=""]<br>
		;x [autowc text="" time=""]</p>
	<hr>
	<p><a id="ch"></a></p>
	<h2><a id="ch-文字を追加する" class="anchor" aria-hidden="true" href="#ch-文字を追加する"></a><a href="#ch">[ch]
			文字を追加する</a></h2>
	<pre><code>文字レイヤに文字を出力する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>表示したい文字列。ルビ文法（《》）も解析する。改行も [r] で出来る</td>
			</tr>
			<tr>
				<td>record</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>履歴に保存するか</td>
			</tr>
			<tr>
				<td>wait</td>
				<td></td>
				<td>現在の文字表示速度</td>
				<td>ミリ秒</td>
				<td>一時的な文字表示速度。0で瞬時。<br>何らかのキー押下やマウスクリックで全てを瞬時表示する</td>
			</tr>
			<tr>
				<td>join</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueで読み込みを待って次のタグへ進む。</td>
			</tr>
		</tbody>
	</table>
	<p>[ch]を使わない、より簡潔な記述文法があります。（ver 3.18以降）<br>
		以下の記述は、<br>
		[ch text=&amp;test]<br>
		[ch text=test]<br>
		[ch text="&amp;a + b"]<br>
		<br>
		以下のようにも書けます。&amp;から&amp;までを[ch]文と解釈します。<br>
		&amp;test&amp;<br>
		&amp;'test'&amp;<br>
		&amp;a + b&amp;</p>
	<hr>
	<p><a id="clear_text"></a></p>
	<h2><a id="clear_text-文字消去" class="anchor" aria-hidden="true" href="#clear_text-文字消去"></a><a href="#clear_text">[clear_text]
			文字消去</a></h2>
	<pre><code>文字のみをクリアする
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="current"></a></p>
	<h2><a id="current-デフォルト文字レイヤ設定" class="anchor" aria-hidden="true" href="#current-デフォルト文字レイヤ設定"></a><a
		 href="#current">[current] デフォルト文字レイヤ設定</a></h2>
	<pre><code>デフォルト文字レイヤを設定する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>layer</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>文字レイヤ名</td>
				<td>デフォルトとするレイヤ</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="endlink"></a></p>
	<h2><a id="endlink-ハイパーリンクの終了" class="anchor" aria-hidden="true" href="#endlink-ハイパーリンクの終了"></a><a href="#endlink">[endlink]
			ハイパーリンクの終了</a></h2>
	<pre><code>[link]（ハイパーリンク）で開始したリンク区間を終了する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="er"></a></p>
	<h2><a id="er-ページ両面の文字消去" class="anchor" aria-hidden="true" href="#er-ページ両面の文字消去"></a><a href="#er">[er]
			ページ両面の文字消去</a></h2>
	<pre><code>デフォルト文字レイヤの裏と表の両方に対して[clear_lay]を行う。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>rec_page_break</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>履歴を改ページするか</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="graph"></a></p>
	<h2><a id="graph-インライン画像表示" class="anchor" aria-hidden="true" href="#graph-インライン画像表示"></a><a href="#graph">[graph]
			インライン画像表示</a></h2>
	<pre><code>文字レイヤに画像を文字として表示する。ルビは同時に設定する。
</code></pre>
	<p>フォントにない外字やswfアニメ画像表示に使える。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td><strong>pic</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>画像ファイル名</td>
				<td>表示する画像やswf</td>
			</tr>
			<tr>
				<td>r</td>
				<td></td>
				<td>ルビ無し</td>
				<td>String</td>
				<td>ルビ文字列（ただしあまりに他の文字サイズと大きく異なる場合は正しい位置に表示されない）</td>
			</tr>
			<tr>
				<td>width</td>
				<td></td>
				<td>画像の横サイズ（※）</td>
				<td>1〜</td>
				<td>表示する画像の横ドットサイズ。<br>元のサイズと異なる場合は拡大・縮小される。</td>
			</tr>
			<tr>
				<td>height</td>
				<td></td>
				<td>画像の縦サイズ（※）</td>
				<td>1〜</td>
				<td>保存する画像の縦ドットサイズ。<br>元のサイズと異なる場合は拡大・縮小される。</td>
			</tr>
		</tbody>
	</table>
	<p>※省略時は画像サイズになるが、ロード完了直後に文字配置を決めるのでちらつく。それを嫌う際に指定する<br>
		※特にモバイルなどでゲーム画面が自動で拡大縮小される場合、省略したらその時の本文文字サイズとして扱われる。なるべくサイズ指定を推奨。</p>
	<hr>
	<p><a id="link"></a></p>
	<h2><a id="link-ハイパーリンク" class="anchor" aria-hidden="true" href="#link-ハイパーリンク"></a><a href="#link">[link]
			ハイパーリンク</a></h2>
	<pre><code>指定した文字レイヤの表ページに、ハイパーリンクを作成する。
</code></pre>
	<p>[link]から[endlink]（ハイパーリンクの終了）までで囲った範囲をリンク区間と呼び、<br>
		その区間の文字や縦中横がハイパーリンクになる。（リンク区間は入れ子に出来ません）<br>
		※選択肢として使用する場合、ジャンプ先のラベル直後には必ず[record_place]を記述して、ジャンプ直後でセーブしても正しくセーブされるようにして下さい。<br>
		ブラウザ実行時、ローカル版swfをブラウザで開いた場合はhref属性によるリンクジャンプが利きません。非ローカル版swfをサーバーに設置すれば動作します。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ名</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td>href</td>
				<td></td>
				<td>何もしない</td>
				<td>URL</td>
				<td>クリック時にブラウザで指定URLを開く</td>
			</tr>
			<tr>
				<td>target</td>
				<td></td>
				<td>何もしない</td>
				<td>HTML タグのtarget属性</td>
				<td>hrefにてブラウザを開く際のtarget属性</td>
			</tr>
			<tr>
				<td>f_color</td>
				<td></td>
				<td>0x8888FF</td>
				<td>色指定。0x000000など</td>
				<td>（リンク上にマウスがない状態）文字色</td>
			</tr>
			<tr>
				<td>f_alpha</td>
				<td></td>
				<td>1.0（不透明）</td>
				<td>0.0〜1.0（実数）</td>
				<td>（リンク上にマウスがない状態）文字の透過度</td>
			</tr>
			<tr>
				<td>f_ul</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>（リンク上にマウスがない状態）trueの場合は文字に下線を引く</td>
			</tr>
			<tr>
				<td>hf_color</td>
				<td></td>
				<td>0xFFFF00</td>
				<td>色指定。0x000000など</td>
				<td>（リンク上にマウスがある状態）文字色</td>
			</tr>
			<tr>
				<td>hf_alpha</td>
				<td></td>
				<td>1.0（不透明）</td>
				<td>0.0〜1.0（実数）</td>
				<td>（リンク上にマウスがある状態）文字の透過度</td>
			</tr>
			<tr>
				<td>hf_ul</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>（リンク上にマウスがある状態）trueの場合は文字に下線を引く</td>
			</tr>
			<tr>
				<td>af_color</td>
				<td></td>
				<td>0x8888FF</td>
				<td>色指定。0x000000など</td>
				<td>（リンクをマウス押下した状態）文字色</td>
			</tr>
			<tr>
				<td>af_alpha</td>
				<td></td>
				<td>1.0（不透明）</td>
				<td>0.0〜1.0（実数）</td>
				<td>（リンクをマウス押下した状態）文字の透過度</td>
			</tr>
			<tr>
				<td>af_ul</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>（リンクをマウス押下した状態）trueの場合は文字に下線を引く</td>
			</tr>
			<tr>
				<td>b_color</td>
				<td></td>
				<td>背景色なし</td>
				<td>色指定。0x000000など</td>
				<td>リンク背景色</td>
			</tr>
			<tr>
				<td>b_alpha</td>
				<td></td>
				<td>1.0（不透明）</td>
				<td>0.0〜1.0（実数）</td>
				<td>リンク背景の透過度</td>
			</tr>
			<tr>
				<td>hint</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>設定した場合のみ、マウスカーソルを載せるとヒントをチップス表示する</td>
			</tr>
			<tr>
				<td>clickse</td>
				<td></td>
				<td>省略時は無音</td>
				<td>効果音ファイル名</td>
				<td>指定すると、クリック時に効果音を再生する</td>
			</tr>
			<tr>
				<td>enterse</td>
				<td></td>
				<td>省略時は無音</td>
				<td>効果音ファイル名</td>
				<td>指定すると、ボタン上にマウスカーソルが載った時に効果音を再生する</td>
			</tr>
			<tr>
				<td>leavese</td>
				<td></td>
				<td>省略時は無音</td>
				<td>効果音ファイル名</td>
				<td>指定すると、ボタン上からマウスカーソルが外れた時に効果音を再生する</td>
			</tr>
			<tr>
				<td>clicksebuf</td>
				<td></td>
				<td>SYS</td>
				<td>サウンドバッファ名</td>
				<td>クリック時効果音を再生するサウンドバッファを指定する</td>
			</tr>
			<tr>
				<td>entersebuf</td>
				<td></td>
				<td>SYS</td>
				<td>サウンドバッファ名</td>
				<td>クリック時効果音を再生するサウンドバッファを指定する</td>
			</tr>
			<tr>
				<td>leavesebuf</td>
				<td></td>
				<td>SYS</td>
				<td>サウンドバッファ名</td>
				<td>クリック時効果音を再生するサウンドバッファを指定する</td>
			</tr>
			<tr>
				<td>call</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueの場合は[call]、falseは[jump]。<br>ただしcall=trueによりサブルーチンコールした場合、[return]によって「コールする前のイベント予約状態＆待ち状態」に戻る。</td>
			</tr>
			<tr>
				<td>fn</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>クリック時にジャンプする先。<br>指定方法は[jump]と同様</td>
			</tr>
			<tr>
				<td>label</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>onenter</td>
				<td></td>
				<td>何もしない</td>
				<td>ラベル名</td>
				<td>マウス重なり（フォーカス取得）時、指定したラベルをコールする。 必ず[return]で戻ること。</td>
			</tr>
			<tr>
				<td>onleave</td>
				<td></td>
				<td>何もしない</td>
				<td>ラベル名</td>
				<td>マウス重なり外れ（フォーカス外れ）時、指定したラベルをコールする。 必ず[return]で戻ること。</td>
			</tr>
			<tr>
				<td>global</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>詳細は[event]と同様。<br>※ボタンを[trans]する場合はtrueにしておく</td>
			</tr>
			<tr>
				<td>arg</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>指定した場合、クリック時ジャンプ先で「&amp;const.an.eventArg」にて値を受け取れる</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="r"></a></p>
	<h2><a id="r-改行" class="anchor" aria-hidden="true" href="#r-改行"></a><a href="#r">[r] 改行</a></h2>
	<pre><code>指定した文字レイヤの表ページに、改行を出力する。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ名</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="rec_ch"></a></p>
	<h2><a id="rec_ch-履歴書き込み" class="anchor" aria-hidden="true" href="#rec_ch-履歴書き込み"></a><a href="#rec_ch">[rec_ch]
			履歴書き込み</a></h2>
	<pre><code>履歴に改行を出力する。自動で改行を付加する。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>表示したい文字列。ルビ文法（《》）も解析する。</td>
			</tr>
			<tr>
				<td>r</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueなら改行する</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="rec_r"></a></p>
	<h2><a id="rec_r-履歴改行" class="anchor" aria-hidden="true" href="#rec_r-履歴改行"></a><a href="#rec_r">[rec_r]
			履歴改行</a></h2>
	<pre><code>履歴に改行を出力する。
</code></pre>
	<p>引数無し。</p>
	<hr>
	<p><a id="reset_rec"></a></p>
	<h2><a id="reset_rec-履歴リセット" class="anchor" aria-hidden="true" href="#reset_rec-履歴リセット"></a><a href="#reset_rec">[reset_rec]
			履歴リセット</a></h2>
	<pre><code>履歴をクリアする。
</code></pre>
	<p>応用として、履歴に加工した文字列を設定し、履歴画面に機能を追加する事も。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>text</td>
				<td></td>
				<td>全てクリア</td>
				<td>String</td>
				<td>履歴に設定したい文字列</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="ruby2"></a></p>
	<h2><a id="ruby2-文字列と複数ルビの追加" class="anchor" aria-hidden="true" href="#ruby2-文字列と複数ルビの追加"></a><a href="#ruby2">[ruby2]
			文字列と複数ルビの追加</a></h2>
	<pre><code>親文字列とルビ文字列のセットで文字を追加する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ名</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td><strong>t</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>親文字列</td>
			</tr>
			<tr>
				<td><strong>r</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>ルビ文字列</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="set_focus"></a></p>
	<h2><a id="set_focus-未作成フォーカス移動" class="anchor" aria-hidden="true" href="#set_focus-未作成フォーカス移動"></a><a
		 href="#set_focus">[set_focus] 未作成：フォーカス移動</a></h2>
	<pre><code>[button]フォーカスを移動する。
</code></pre>
	<p>説明に「フォーカス順」とある場合は、[button]が文字レイヤに追加された順番。<br>
		先頭は最初に追加された[button]。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>to</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>（コメントで解説）</td>
				<td>prev……フォーカス順で前の[button]に移動<br>next……フォーカス順で次の[button]に移動<br>null……どの[button]にもフォーカスがない状態にする<br>数値……数値をフォーカス順の番号（0〜）として移動</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="span"></a></p>
	<h2><a id="span-インラインスタイル設定" class="anchor" aria-hidden="true" href="#span-インラインスタイル設定"></a><a href="#span">[span]
			インラインスタイル設定</a></h2>
	<pre><code>この指定以降の文字のレイアウト（フォントや文字色など）を指定する。
</code></pre>
	<p>一時的に文字レイヤのlayout属性への指定を上書きするイメージ。
		文字レイヤをクリア（[clear_text]、[clear_lay]）するとリセット、以降は元通り文字レイヤのlayout属性に従う</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td>layout</td>
				<td></td>
				<td>リセット</td>
				<td>String</td>
				<td>文字のレイアウトを指定する。文法は[lay]のlayout属性と同様。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="tcy"></a></p>
	<h2><a id="tcy-縦中横を表示する" class="anchor" aria-hidden="true" href="#tcy-縦中横を表示する"></a><a href="#tcy">[tcy]
			縦中横を表示する</a></h2>
	<pre><code>縦中横文字を追加する。ルビは同時に設定する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>文字を表示するレイヤ</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td><strong>t</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>縦中横文字列、通常半角文字を指定する。</td>
			</tr>
			<tr>
				<td>r</td>
				<td></td>
				<td>ルビ無し</td>
				<td>String</td>
				<td>ルビ文字列</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="画像画像レイヤ" class="anchor" aria-hidden="true" href="#画像画像レイヤ"></a>画像・画像レイヤ</h1>
	<p><a id="add_face"></a></p>
	<h2><a id="add_face-差分画像の追加" class="anchor" aria-hidden="true" href="#add_face-差分画像の追加"></a><a href="#add_face">[add_face]
			差分画像の追加</a></h2>
	<pre><code>差分画像を登録する。
</code></pre>
	<p>本タグだけでは差分画像を表示しない。画像レイヤの[lay]タグface属性で指定する差分名称を登録する。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>差分名称</td>
				<td>[lay]タグface属性で指定する差分名称</td>
			</tr>
			<tr>
				<td>fn</td>
				<td></td>
				<td>属性nameの値</td>
				<td>画像ファイル名</td>
				<td>表示する画像、swf</td>
			</tr>
			<tr>
				<td>dx</td>
				<td></td>
				<td>0</td>
				<td>基本画像左上を(0, 0)とする座標</td>
				<td>差分画像の表示横位置</td>
			</tr>
			<tr>
				<td>dy</td>
				<td></td>
				<td>0</td>
				<td>(↑と同じ)</td>
				<td>差分画像の表示縦位置</td>
			</tr>
			<tr>
				<td>blendmode</td>
				<td></td>
				<td>何もしない</td>
				<td>ブレンドモード名（"screen"など）</td>
				<td>このレイヤと下のレイヤとの重なりにおいて、<br>ドット単位で色のブレンド演算を行なう。<br>詳細はblendModeの解説を参照。</td>
			</tr>
		</tbody>
	</table>
	<p>例えば同じ画像で差分表示位置やブレンドモードが違う登録をしたい場合、<br>
		[add_face name="a_normal" fn="画像" dx=0 dy=0]<br>
		[add_face name="a_10_10" fn="画像" dx=10 dy=10]<br>
		[add_face name="a_screen" fn="画像" dx=0 dy=0 blendmode="screen"]<br>
		とnameを変えることで登録できます。</p>
	<hr>
	<h1><a id="htmlフレーム" class="anchor" aria-hidden="true" href="#htmlフレーム"></a>HTMLフレーム</h1>
	<p><a id="add_frame"></a></p>
	<h2><a id="add_frame-フレーム" class="anchor" aria-hidden="true" href="#add_frame-フレーム"></a><a href="#add_frame">[add_frame]
			フレーム</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="let_frame"></a></p>
	<h2><a id="let_frame-フレーム" class="anchor" aria-hidden="true" href="#let_frame-フレーム"></a><a href="#let_frame">[let_frame]
			フレーム</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="set_frame"></a></p>
	<h2><a id="set_frame-フレーム" class="anchor" aria-hidden="true" href="#set_frame-フレーム"></a><a href="#set_frame">[set_frame]
			フレーム</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="frame"></a></p>
	<h2><a id="frame-フレーム" class="anchor" aria-hidden="true" href="#frame-フレーム"></a><a href="#frame">[frame]
			フレーム</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="tsy_frame"></a></p>
	<h2><a id="tsy_frame-フレーム" class="anchor" aria-hidden="true" href="#tsy_frame-フレーム"></a><a href="#tsy_frame">[tsy_frame]
			フレーム</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="イベント" class="anchor" aria-hidden="true" href="#イベント"></a>イベント</h1>
	<p><a id="clear_event"></a></p>
	<h2><a id="clear_event-イベントを全消去" class="anchor" aria-hidden="true" href="#clear_event-イベントを全消去"></a><a
		 href="#clear_event">[clear_event] イベントを全消去</a></h2>
	<pre><code>イベント予約を全て削除する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>global</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueを指定すると全ての大域イベントを削除する。</td>
			</tr>
			<tr>
				<td>falseの場合は大域以外の全てのイベントを削除する</td>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="enable_event"></a></p>
	<h2><a id="enable_event-イベント有無の切替" class="anchor" aria-hidden="true" href="#enable_event-イベント有無の切替"></a><a
		 href="#enable_event">[enable_event] イベント有無の切替</a></h2>
	<pre><code>文字レイヤごとのイベント発生有効無効を設定する。
</code></pre>
	<p>無効にするとマウスイベントが無効になり、[s]待ちなどでイベントが発生しなくなるが、イベント予約は別の話であり、削除などされない。
		有効にすればマウスイベントが発生するようになり、再びイベント待ちされるようになる</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>イベント有効無効を設定するレイヤ</td>
			</tr>
			<tr>
				<td>enabled</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>イベントを有効にするか</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="event"></a></p>
	<h2><a id="event-イベントを予約" class="anchor" aria-hidden="true" href="#event-イベントを予約"></a><a href="#event">[event]
			イベントを予約</a></h2>
	<pre><code>次の[s]などのイベント待ちに向けてイベント処理を予約する。
</code></pre>
	<p>あるイベントが発生した際、global=falseのイベント予約は全て削除される</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>key</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>click、rightclick、middleclick、upwheel、downwheel、<br>イベントのキー名※1</td>
				<td>イベントを発生させるトリガーイベント<br><br>修飾キーの同時押し（あるいは修飾キーを押しといて通常キー）を任意に組み合わせられます。「半角プラスで」「ABC順に」「イベントのキー名の前に」繋げて下さい。<br>（例1）key=alt+enter<br>（例2）key=alt+ctrl+shift+enter<br>修飾キー対応表は以下になります。<br>AIRNovel表記</td>
			</tr>
			<tr>
				<td>fn</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>イベント発生時にジャンプする先。指定方法は[jump]と同様。<br>callの場合、ジャンプ先から[return]で戻ると、<br>再度[s]などのイベント待ち状態に戻る。</td>
			</tr>
			<tr>
				<td>label</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>global</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueを指定すると大域的なイベント扱いとなり、<br>イベント発生時にイベント予約が削除されない</td>
			</tr>
			<tr>
				<td>arg</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>指定した場合、クリック時ジャンプ先で「&amp;const.an.eventArg」にて値を受け取れる</td>
			</tr>
			<tr>
				<td>del</td>
				<td>...</td>
				<td></td>
				<td>Boolean</td>
				<td>trueを指定すると予約済みイベントを削除する。<br>fn/label/callとdelは同時指定できません</td>
			</tr>
			<tr>
				<td>frame</td>
				<td></td>
				<td>10</td>
				<td>1〜</td>
				<td>key=enter_frameの場合のみ有効。<br>フレームイベントは毎秒何度も（[window]のframerate回）発生するが、 アプリ全体が重くなるので、適度に間引いてイベントを時々発生させるため、
					フレーム何回に一回イベントを発生させるかを指定する。<br>例）30フレームで動作するアプリでframe=15を指定すると、30/15=0.5秒に一回発生（タイミングにより厳密ではない）</td>
			</tr>
		</tbody>
	</table>
	<p>※1 イベントのキー名は以下のキーボードキー名かActionScriptイベント名のいずれか。
		key属性の値 | コメント
		-- | --
		alternate | optionと同値。Winで言うALTキー。MacならOptionキー
		backquote |
		backslash |
		backspace |
		caps_lock |
		command | Macにある、Winで言うCTRLキーのようなもの
		control |
		delete |
		down | 矢印キーの下
		end |
		enter |
		equal | 「=（イコール）」キーはMacにしか無い
		escape |
		home |
		left | 矢印キーの左
		numpad_enter | テンキーのEnterキー。テンキーはキーボードによっては存在しない
		option | alternateと同値。Winで言うALTキー。MacならOptionキー
		orientation | （デバイス・ANBooksのみ）デバイスが回転したらイベント発生（※3）
		page_down |
		page_up |
		right | 矢印キーの右
		shift |
		space |
		tab |
		up | 矢印キーの上
		f1 |
		f2 |
		f3 |
		f4 |
		f5 |
		f6 |
		f7 |
		f8 |
		f9 |
		f10 |
		f11 |
		f12 |
		f13 | キーボードによっては存在しない
		f14 | キーボードによっては存在しない
		f15 | キーボードによっては存在しない
		enter_frame | 毎フレーム毎にイベント発生（※2）
		activate | アプリがフォーカスを取得して、アクティブ（前面）になった
		deactivate | アプリがフォーカスを失って、非アクティブになった
		back | （Android）戻るキー<br>（ちなみにホームキーはAndroid仕様でホームに戻る以外の機能は持たせられない）
		menu | （Android）メニューキー
		search | （Android）検索キー</p>
	<p>※2 enter_frameイベントは毎秒何度も発生する。</p>
	<hr>
	<p><a id="l"></a></p>
	<h2><a id="l-行末クリック待ち" class="anchor" aria-hidden="true" href="#l-行末クリック待ち"></a><a href="#l">[l] 行末クリック待ち</a></h2>
	<pre><code>シナリオファイルの順次処理を停止し、クリックやキー押下（→詳細は[waitclick]）を待つ。
</code></pre>
	<p>「breakline」という画像やswfファイルが用意されていれば、行末クリック待ちマークとして表示する。
		クリックやキー押下が発生した場合、処理を再開する。
		[event]などでイベントが登録されていれば、イベント発生待ちを行う。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>visible</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueで行末クリック待ち記号を表示、falseで非表示</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="p"></a></p>
	<h2><a id="p-改ページクリック待ち" class="anchor" aria-hidden="true" href="#p-改ページクリック待ち"></a><a href="#p">[p]
			改ページクリック待ち</a></h2>
	<pre><code>シナリオファイルの順次処理を停止し、クリックやキー押下（→詳細は[waitclick]）を待つ。
</code></pre>
	<p>「breakpage」という画像やswfファイルが用意されていれば、改ページクリック待ちマークとして表示する。
		クリックやキー押下が発生した場合、処理を再開する。
		[event]などでイベントが登録されていれば、イベント発生待ちを行う。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>visible</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueで改ページ記号を表示、falseで非表示</td>
			</tr>
			<tr>
				<td>er</td>
				<td></td>
				<td>何もしない</td>
				<td>Boolean</td>
				<td>trueで改ページ待ち後に[er]処理を行なう</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="s"></a></p>
	<h2><a id="s-停止する" class="anchor" aria-hidden="true" href="#s-停止する"></a><a href="#s">[s] 停止する</a></h2>
	<pre><code>引数無し。
</code></pre>
	<p>シナリオファイルの順次処理を停止する。
		[event]などでイベントが登録されていれば、イベント発生待ちを行う。</p>
	<hr>
	<p><a id="set_cancel_skip"></a></p>
	<h2><a id="set_cancel_skip-スキップ中断予約" class="anchor" aria-hidden="true" href="#set_cancel_skip-スキップ中断予約"></a><a
		 href="#set_cancel_skip">[set_cancel_skip] スキップ中断予約</a></h2>
	<p>引数無し。
		ページ末まで一気に読み進むモード、自動読みすすみモードなどの開始に備え、クリックなどで処理を中断できるような特殊イベントを予約する。
		クリックやキー押下が発生した場合、処理を再開する。</p>
	<p>※例えば自動読み進みモードだと[l][p]などで停止しないため、予約イベントが処理されない。その為のタグ。</p>
	<hr>
	<p><a id="wait"></a></p>
	<h2><a id="wait-ウェイトを入れる" class="anchor" aria-hidden="true" href="#wait-ウェイトを入れる"></a><a href="#wait">[wait]
			ウェイトを入れる</a></h2>
	<pre><code>指定時間スクリプト処理を待ち、再開する。
</code></pre>
	<p>[event]などでイベントが登録されていても、イベント発生待ちを行わない。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>time</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>ミリ秒</td>
				<td>処理を待つ時間</td>
			</tr>
			<tr>
				<td>canskip</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>クリックなど（→詳細は[waitclick]）でウエイトをキャンセルできるか</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="waitclick"></a></p>
	<h2><a id="waitclick-クリックを待つ" class="anchor" aria-hidden="true" href="#waitclick-クリックを待つ"></a><a href="#waitclick">[waitclick]
			クリックを待つ</a></h2>
	<pre><code>シナリオファイルの順次処理を停止し、クリックやキー押下※を待つ。
</code></pre>
	<p>引数無し。<br>
		クリックやキー押下が発生した場合、処理を再開する。<br>
		[event]などでイベントが登録されていれば、イベント発生待ちを行う。<br>
		<br>
		※クリックやキー押下とは、以下のイベントを差す。<br>
		　　click<br>
		　　downwheel（下方向へのマウスホイール）<br>
		　　enter<br>
		　　space<br>
		　　down（矢印キーの下）</p>
	<hr>
	<h1><a id="ｂｇｍ効果音" class="anchor" aria-hidden="true" href="#ｂｇｍ効果音"></a>ＢＧＭ・効果音</h1>
	<p><a id="fadebgm"></a></p>
	<h2><a id="fadebgm-bgmのフェード" class="anchor" aria-hidden="true" href="#fadebgm-bgmのフェード"></a><a href="#fadebgm">[fadebgm]
			BGMのフェード</a></h2>
	<pre><code>BGMを指定した音量に、段階的に変化させる。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>volume</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>0.0〜1.0（実数）</td>
				<td>音量</td>
			</tr>
			<tr>
				<td><strong>time</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>ミリ秒</td>
				<td>フェード時間</td>
			</tr>
			<tr>
				<td>delay</td>
				<td></td>
				<td>0</td>
				<td>ミリ秒</td>
				<td>変化する前に待機する遅延時間</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="fadeoutbgm"></a></p>
	<h2><a id="fadeoutbgm-bgmのフェードアウト" class="anchor" aria-hidden="true" href="#fadeoutbgm-bgmのフェードアウト"></a><a
		 href="#fadeoutbgm">[fadeoutbgm] BGMのフェードアウト</a></h2>
	<pre><code>BGMを無音に、段階的に変化させる。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>time</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>ミリ秒</td>
				<td>フェード時間</td>
			</tr>
			<tr>
				<td>stop</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueで「フェード終了時の再生停止」、falseなら行なわない。</td>
			</tr>
			<tr>
				<td>delay</td>
				<td></td>
				<td>0</td>
				<td>ミリ秒</td>
				<td>変化する前に待機する遅延時間</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="fadeoutse"></a></p>
	<h2><a id="fadeoutse-効果音のフェードアウト" class="anchor" aria-hidden="true" href="#fadeoutse-効果音のフェードアウト"></a><a
		 href="#fadeoutse">[fadeoutse] 効果音のフェードアウト</a></h2>
	<pre><code>効果音を無音に、段階的に変化させる。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名を変えれば同時に複数の音を操作することが出来ます。</td>
			</tr>
			<tr>
				<td><strong>time</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>ミリ秒</td>
				<td>フェード時間</td>
			</tr>
			<tr>
				<td>stop</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueで「フェード終了時の再生停止」、falseなら行なわない。</td>
			</tr>
			<tr>
				<td>delay</td>
				<td></td>
				<td>0</td>
				<td>ミリ秒</td>
				<td>変化する前に待機する遅延時間</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="fadese"></a></p>
	<h2><a id="fadese-効果音のフェード" class="anchor" aria-hidden="true" href="#fadese-効果音のフェード"></a><a href="#fadese">[fadese]
			効果音のフェード</a></h2>
	<pre><code>効果音を指定した音量に、段階的に変化させる。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名を変えれば同時に複数の音を操作することが出来ます。</td>
			</tr>
			<tr>
				<td><strong>volume</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>0.0〜1.0（実数）</td>
				<td>音量</td>
			</tr>
			<tr>
				<td><strong>time</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>ミリ秒</td>
				<td>フェード時間</td>
			</tr>
			<tr>
				<td>delay</td>
				<td></td>
				<td>0</td>
				<td>ミリ秒</td>
				<td>変化する前に待機する遅延時間</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="playbgm"></a></p>
	<h2><a id="playbgm-bgm-の演奏" class="anchor" aria-hidden="true" href="#playbgm-bgm-の演奏"></a><a href="#playbgm">[playbgm]
			BGM の演奏</a></h2>
	<p>BGMを再生する。
		[playse]とは違い、キー押下Skip中でも必ず再生を行なう。（canskip = false）</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>fn</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>BGM音声ファイル名</td>
				<td>再生する音声ファイル名</td>
			</tr>
			<tr>
				<td>loop</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueでBGMのようにループ再生する。</td>
			</tr>
			<tr>
				<td>volume</td>
				<td></td>
				<td>1.0</td>
				<td>0.0〜1.0（実数）</td>
				<td>再生音量。ただし音量を示すシステム変数（sys:const.an.sound.BGM.volume）は変更しない</td>
			</tr>
			<tr>
				<td>ret_ms</td>
				<td></td>
				<td>0（冒頭）</td>
				<td>ミリ秒</td>
				<td>ループ戻り位置指定。冒頭から再生開始するが、mp3終端に行くたびに指定したミリ秒の位置に戻る</td>
			</tr>
			<tr>
				<td>end_ms</td>
				<td></td>
				<td>終端</td>
				<td>ミリ秒</td>
				<td>音声ファイルの終端位置を指定する。（音声ファイルの末尾にどうしても無音が残る場合、ループ時に困るときなどに）<br>正の値は「冒頭から何ms目を終端とするか」<br>負の値は「末尾から何ms手前を終端とするか」の指定。</td>
			</tr>
			<tr>
				<td>join</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueで読み込みを待って次のタグへ進む。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="playse"></a></p>
	<h2><a id="playse-効果音の再生" class="anchor" aria-hidden="true" href="#playse-効果音の再生"></a><a href="#playse">[playse]
			効果音の再生</a></h2>
	<pre><code>効果音を再生する。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>fn</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>効果音音声ファイル名</td>
				<td>再生する音声ファイル名</td>
			</tr>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名を変えれば同時に複数の音を操作することが出来ます。</td>
			</tr>
			<tr>
				<td>loop</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueでBGMのようにループ再生する。</td>
			</tr>
			<tr>
				<td>volume</td>
				<td></td>
				<td>1.0</td>
				<td>0.0〜1.0（実数）</td>
				<td>再生音量。ただし音量を示すシステム変数（sys:const.an.sound.【トラック名】.volume）は変更しない</td>
			</tr>
			<tr>
				<td>ret_ms</td>
				<td></td>
				<td>0（冒頭）</td>
				<td>ミリ秒</td>
				<td>ループ戻り位置指定。冒頭から再生開始するが、mp3終端に行くたびに指定したミリ秒の位置に戻る。</td>
			</tr>
			<tr>
				<td>end_ms</td>
				<td></td>
				<td>終端</td>
				<td>ミリ秒</td>
				<td>音声ファイルの終端位置を指定する。（音声ファイルの末尾にどうしても無音が残る場合、ループ時に困るときなどに）<br>正の値は「冒頭から何ms目を終端とするか」<br>負の値は「末尾から何ms手前を終端とするか」の指定。</td>
			</tr>
			<tr>
				<td>join</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueで読み込みを待って次のタグへ進む。</td>
			</tr>
			<tr>
				<td>canskip</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueでキー押下Skip中なら再生をしない</td>
			</tr>
			<tr>
				<td>cache</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueなら今まで通り、内部的にサウンドデータをキャッシュして再度再生時に素早く再生する（mp3のみ）</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="stop_allse"></a></p>
	<h2><a id="stop_allse-全効果音再生の停止" class="anchor" aria-hidden="true" href="#stop_allse-全効果音再生の停止"></a><a
		 href="#stop_allse">[stop_allse] 全効果音再生の停止</a></h2>
	<pre><code>全てのサウンドを停止する。ぴたっと止める。
</code></pre>
	<hr>
	<p><a id="stopbgm"></a></p>
	<h2><a id="stopbgm-bgm-演奏の停止" class="anchor" aria-hidden="true" href="#stopbgm-bgm-演奏の停止"></a><a href="#stopbgm">[stopbgm]
			BGM 演奏の停止</a></h2>
	<pre><code>BGM 演奏を停止する。ぴたっと止める。
</code></pre>
	<hr>
	<p><a id="stopfadese"></a></p>
	<h2><a id="stopfadese-音声フェードの停止" class="anchor" aria-hidden="true" href="#stopfadese-音声フェードの停止"></a><a
		 href="#stopfadese">[stopfadese] 音声フェードの停止</a></h2>
	<pre><code>音声フェードを停止する。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名を変えれば同時に複数の音を操作することが出来ます。<br>BGMと指定するとBGMの指定。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="stopse"></a></p>
	<h2><a id="stopse-効果音再生の停止" class="anchor" aria-hidden="true" href="#stopse-効果音再生の停止"></a><a href="#stopse">[stopse]
			効果音再生の停止</a></h2>
	<p>効果音再生を停止する。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名を変えれば同時に複数の音を操作することが出来ます。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="volume"></a></p>
	<h2><a id="volume-音量設定" class="anchor" aria-hidden="true" href="#volume-音量設定"></a><a href="#volume">[volume]
			音量設定</a></h2>
	<p>BGMや効果音を指定した音量にする。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名を変えれば同時に複数の音を操作することが出来ます。<br>BGMと指定するとBGMの音量設定。</td>
			</tr>
			<tr>
				<td>volume</td>
				<td></td>
				<td>1.0</td>
				<td>0.0〜1.0（実数）</td>
				<td>音量</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="wb"></a></p>
	<h2><a id="wb-bgm-フェードの終了待ち" class="anchor" aria-hidden="true" href="#wb-bgm-フェードの終了待ち"></a><a href="#wb">[wb]
			BGM フェードの終了待ち</a></h2>
	<p>BGM フェードの終了を待つ。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>canskip</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueでクリックキャンセル可能にする。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="wf"></a></p>
	<h2><a id="wf-効果音フェードの終了待ち" class="anchor" aria-hidden="true" href="#wf-効果音フェードの終了待ち"></a><a href="#wf">[wf]
			効果音フェードの終了待ち</a></h2>
	<p>効果音 フェードの終了を待つ。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名を変えれば同時に複数の音を操作することが出来ます。</td>
			</tr>
			<tr>
				<td>canskip</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueでクリックキャンセル可能にする。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="wl"></a></p>
	<h2><a id="wl-bgm-再生の終了待ち" class="anchor" aria-hidden="true" href="#wl-bgm-再生の終了待ち"></a><a href="#wl">[wl]
			BGM 再生の終了待ち</a></h2>
	<pre><code>BGM 再生の終了を待つ。
</code></pre>
	<p>loop=true（[playbgm]のデフォルト値）なら待たない。<br>
		利用時は【音声再生[playbgm]がjoin=true(ちなみにデフォルト)であること】を必須条件とします。</p>
	<hr>
	<p><a id="ws"></a></p>
	<h2><a id="ws-効果音再生の終了待ち" class="anchor" aria-hidden="true" href="#ws-効果音再生の終了待ち"></a><a href="#ws">[ws]
			効果音再生の終了待ち</a></h2>
	<pre><code>効果音再生の終了を待つ。
</code></pre>
	<p>loop=trueなら待たない。
		利用時は【音声再生[playse]がjoin=true(ちなみにデフォルト)であること】を必須条件とします。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名を変えれば同時に複数の音を操作することが出来ます。</td>
			</tr>
			<tr>
				<td>canskip</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueでクリックキャンセル可能にする。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="xchgbuf"></a></p>
	<h2><a id="xchgbuf-再生トラックの交換" class="anchor" aria-hidden="true" href="#xchgbuf-再生トラックの交換"></a><a href="#xchgbuf">[xchgbuf]
			再生トラックの交換</a></h2>
	<pre><code>二つのバッファを交換する。未再生でも再生中でも良いが、フェード中は避けること。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>buf</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>トラック名</td>
			</tr>
			<tr>
				<td>buf2</td>
				<td></td>
				<td>SE</td>
				<td>効果音を識別するトラック名</td>
				<td>もう一つのトラック名</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="条件分岐" class="anchor" aria-hidden="true" href="#条件分岐"></a>条件分岐</h1>
	<p><a id="else"></a></p>
	<h2><a id="else-その他ifブロック開始" class="anchor" aria-hidden="true" href="#else-その他ifブロック開始"></a><a href="#else">[else]
			その他ifブロック開始</a></h2>
	<pre><code>プログラム言語における、条件分岐のelse文。
</code></pre>
	<p>引数無し。<br>
		詳細は【開発者向け情報：式の評価と条件分岐】をご覧下さい。</p>
	<hr>
	<p><a id="elsif"></a></p>
	<h2><a id="elsif-別条件のifブロック開始" class="anchor" aria-hidden="true" href="#elsif-別条件のifブロック開始"></a><a href="#elsif">[elsif]
			別条件のifブロック開始</a></h2>
	<pre><code>プログラム言語における、条件分岐のelsif文。
</code></pre>
	<p>詳細は【開発者向け情報：式の評価と条件分岐】をご覧下さい。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>exp</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>Boolean</td>
				<td>trueの場合処理は直後にうつる。</td>
			</tr>
			<tr>
				<td>falseなら次の[elsif]や[else]の評価を行なう。</td>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="endif"></a></p>
	<h2><a id="endif-ifブロックの終端" class="anchor" aria-hidden="true" href="#endif-ifブロックの終端"></a><a href="#endif">[endif]
			ifブロックの終端</a></h2>
	<pre><code>プログラム言語における、条件分岐のendif文。
</code></pre>
	<p>引数無し。<br>
		詳細は【開発者向け情報：式の評価と条件分岐】をご覧下さい。</p>
	<hr>
	<p><a id="if"></a></p>
	<h2><a id="if-ifブロックの開始" class="anchor" aria-hidden="true" href="#if-ifブロックの開始"></a><a href="#if">[if]
			ifブロックの開始</a></h2>
	<pre><code>プログラム言語における、条件分岐のif文。
</code></pre>
	<p>詳細は【開発者向け情報：式の評価と条件分岐】をご覧下さい。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>exp</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>Boolean</td>
				<td>trueの場合処理は直後にうつる。<br>falseなら次の[elsif]や[else]の評価を行なう。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="ラベルジャンプ" class="anchor" aria-hidden="true" href="#ラベルジャンプ"></a>ラベル・ジャンプ</h1>
	<p><a id="button"></a></p>
	<h2><a id="button-ボタンを表示" class="anchor" aria-hidden="true" href="#button-ボタンを表示"></a><a href="#button">[button]
			ボタンを表示</a></h2>
	<pre><code>文字レイヤにボタンを配置する。
</code></pre>
	<p>※選択肢として使用する場合、ジャンプ先のラベル直後には必ず[record_place]を記述して、ジャンプ直後でセーブしても正しくセーブされるようにして下さい。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>デフォルト文字レイヤ</td>
				<td>文字レイヤ名</td>
				<td>ボタンを配置する文字レイヤ</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>back</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td><strong>pic</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>画像ファイル名（swf不可）</td>
				<td>ボタンとして配置する画像を指定する。<br>ただし画像は縦に三等分し、左から「通常時」「クリック押下時」「マウスカーソルを載せた時」の画像として表示する。</td>
			</tr>
			<tr>
				<td>pos<br>left<br>center<br>right<br>s_right<br>top<br>middle<br>bottom<br>s_bottom</td>
				<td></td>
				<td>※</td>
				<td>※</td>
				<td>※詳細は[lay]を参照</td>
			</tr>
			<tr>
				<td>hint</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>設定した場合のみ、マウスカーソルを載せるとヒントをチップス表示する</td>
			</tr>
			<tr>
				<td>clickse</td>
				<td></td>
				<td>省略時は無音</td>
				<td>効果音ファイル名</td>
				<td>指定すると、クリック時に効果音を再生する</td>
			</tr>
			<tr>
				<td>enterse</td>
				<td></td>
				<td>省略時は無音</td>
				<td>効果音ファイル名</td>
				<td>指定すると、ボタン上にマウスカーソルが載った時に効果音を再生する</td>
			</tr>
			<tr>
				<td>leavese</td>
				<td></td>
				<td>省略時は無音</td>
				<td>効果音ファイル名</td>
				<td>指定すると、ボタン上からマウスカーソルが外れた時に効果音を再生する</td>
			</tr>
			<tr>
				<td>clicksebuf</td>
				<td></td>
				<td>SYS</td>
				<td>サウンドバッファ名</td>
				<td>クリック時効果音を再生するサウンドバッファを指定する</td>
			</tr>
			<tr>
				<td>entersebuf</td>
				<td></td>
				<td>SYS</td>
				<td>サウンドバッファ名</td>
				<td>クリック時効果音を再生するサウンドバッファを指定する</td>
			</tr>
			<tr>
				<td>leavesebuf</td>
				<td></td>
				<td>SYS</td>
				<td>サウンドバッファ名</td>
				<td>クリック時効果音を再生するサウンドバッファを指定する</td>
			</tr>
			<tr>
				<td>call</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueの場合は[call]、falseは[jump]。<br>ただしcall=trueによりサブルーチンコールした場合、[return]によって「コールする前のイベント予約状態＆待ち状態」に戻る。</td>
			</tr>
			<tr>
				<td>fn</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>クリック時にジャンプする先。<br>指定方法は[jump]と同様</td>
			</tr>
			<tr>
				<td>label</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>arg</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>指定した場合、クリック時ジャンプ先で「&amp;const.an.eventArg」にて値を受け取れる</td>
			</tr>
			<tr>
				<td>r_call</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>右クリック時ジャンプについての指定。<br>trueの場合は[call]、falseは[jump]。<br>ただしr_call=trueによりサブルーチンコールした場合、[return]によって「コールする前のイベント予約状態＆待ち状態」に戻る。</td>
			</tr>
			<tr>
				<td>r_fn</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>右クリック時にジャンプする先。<br>指定方法は[jump]と同様</td>
			</tr>
			<tr>
				<td>r_label</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>r_arg</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>指定した場合、右クリック時ジャンプ先で「&amp;const.an.eventArg」にて値を受け取れる</td>
			</tr>
			<tr>
				<td>onenter</td>
				<td></td>
				<td>何もしない</td>
				<td>ラベル名</td>
				<td>マウス重なり（フォーカス取得）時、指定したラベルをコールする。 必ず[return]で戻ること。</td>
			</tr>
			<tr>
				<td>onleave</td>
				<td></td>
				<td>何もしない</td>
				<td>ラベル名</td>
				<td>マウス重なり外れ（フォーカス外れ）時、指定したラベルをコールする。 必ず[return]で戻ること。</td>
			</tr>
			<tr>
				<td>global</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>詳細は[event]と同様。<br>※ボタンを[trans]する場合はtrueにしておく</td>
			</tr>
			<tr>
				<td>enabled</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>falseだと押せないボタンとなり、クリックイベントが発生しない。<br>これにより文字レイヤの任意の位置に画像表示できる機能を提供する。<br>画像は三等分しない。イベントや効果音指定は無効だが、ヒント機能は有効。</td>
			</tr>
			<tr>
				<td>join</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>trueで画像読み込みを待って次のタグへ進む。</td>
			</tr>
			<tr>
				<td>event_at_down</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>true：押すだけでイベント発動（画面常駐のシステムボタンなどに）<br>false：押して離すとイベント発動</td>
			</tr>
			<tr>
				<td>draggable</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>true：テキスト背後の矩形をドラッグできる。<br>event_at_down=trueだとクリックイベントが発生しなくなる。</td>
			</tr>
			<tr>
				<td>drag_x</td>
				<td></td>
				<td>0</td>
				<td>画面左上を(0, 0)とする座標</td>
				<td>ドラッグ範囲の左上始点。</td>
			</tr>
			<tr>
				<td>drag_y</td>
				<td></td>
				<td>0</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>drag_w</td>
				<td></td>
				<td>画面横幅</td>
				<td>ドラッグ範囲縦横ピクセル数</td>
				<td>ドラッグ範囲縦横サイズ。</td>
			</tr>
			<tr>
				<td>drag_h</td>
				<td></td>
				<td>画面縦幅</td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>dragmove_fn</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>ドラッグ中にサブルーチンコールする先。<br>指定方法は[jump]と同様</td>
			</tr>
			<tr>
				<td>dragmove_label</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>(↑と同じ)</td>
			</tr>
			<tr>
				<td>dragmove_arg</td>
				<td></td>
				<td></td>
				<td>String</td>
				<td>指定した場合、ドラッグ中コール先で「&amp;const.an.eventArg」にて値を受け取れる</td>
			</tr>
			<tr>
				<td>alpha</td>
				<td></td>
				<td>1.0</td>
				<td>0.0〜1.0（実数）</td>
				<td>透過度。0（完全透明）〜0.5（半透明）〜1（不透明）</td>
			</tr>
			<tr>
				<td>blendmode</td>
				<td></td>
				<td>何もしない</td>
				<td>ブレンドモード名（"screen"など）</td>
				<td>このボタンと下のレイヤとの重なりにおいて、<br>ドット単位で色のブレンド演算を行なう。<br>詳細はblendModeの解説を参照。</td>
			</tr>
			<tr>
				<td>rotation</td>
				<td></td>
				<td>0</td>
				<td>-180〜180</td>
				<td>回転角を度単位で指定。時計回りは0～180、反時計回りは0～-180を指定。 左上を中心に回る</td>
			</tr>
			<tr>
				<td>scale_x</td>
				<td></td>
				<td>1.0</td>
				<td>正負の実数値</td>
				<td>横方向を何倍に拡大／縮小するか。負の値ならレイヤを左右反転</td>
			</tr>
			<tr>
				<td>scale_y</td>
				<td></td>
				<td>1.0</td>
				<td>正負の実数値</td>
				<td>縦方向を何倍に拡大／縮小するか。負の値ならレイヤを上下反転</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="call"></a></p>
	<h2><a id="call-サブルーチンコール" class="anchor" aria-hidden="true" href="#call-サブルーチンコール"></a><a href="#call">[call]
			サブルーチンコール</a></h2>
	<pre><code>スクリプト処理の現在位置をコールスタックに積み、ジャンプする。
</code></pre>
	<p>ジャンプ先での[return]により本タグの次の位置に戻る事が出来る。
		※あらゆるタグの中で唯一「通常、既読としない」タグですが、普通に使う分には気にしなくて良いです。</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>fn</td>
				<td>どちらか、もしくは両方を指定</td>
				<td>処理中のスクリプトファイル</td>
				<td>スクリプトファイル名</td>
				<td>コール先のスクリプトファイル<br>[call fn=ext_*]のようにワイルドカードをサポート。マッチするスクリプトを順不同にコールする。 （ワイルドカードは後方のみ）</td>
			</tr>
			<tr>
				<td>label</td>
				<td>スクリプトファイルの先頭</td>
				<td>ラベル名（半角アスタリスク*も含む）</td>
				<td>コール先のスクリプトファイルにあるラベル</td>
				<td></td>
			</tr>
			<tr>
				<td>count</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>タグ位置を既読とするか</td>
			</tr>
			<tr>
				<td>clear_local_event</td>
				<td></td>
				<td>何もしない</td>
				<td>Boolean</td>
				<td>trueの場合は[clear_event]を行なってからコールする。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="jump"></a></p>
	<h2><a id="jump-シナリオジャンプ" class="anchor" aria-hidden="true" href="#jump-シナリオジャンプ"></a><a href="#jump">[jump]
			シナリオジャンプ</a></h2>
	<pre><code>指定位置のスクリプトにジャンプする
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>fn</td>
				<td>どちらか、もしくは両方を指定</td>
				<td>処理中のスクリプトファイル</td>
				<td>スクリプトファイル名</td>
				<td>コール先のスクリプトファイル</td>
			</tr>
			<tr>
				<td>label</td>
				<td>スクリプトファイルの先頭</td>
				<td>ラベル名（半角アスタリスク*も含む）</td>
				<td>コール先のスクリプトファイルにあるラベル</td>
				<td></td>
			</tr>
			<tr>
				<td>count</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>タグ位置を既読とするか</td>
			</tr>
		</tbody>
	</table>
	<pre><code>ラベルは例えば以下のように使います。
; =======================
*aaa
	無限ループ
	[jump label=*aaa]
; =======================

さらにラベル名を考えるのが面倒なとき、「無名ラベル」ともいうべき機能が使えます。
「**after」は「そのコマンド以降で最初に見つかった**ラベルに」
「**before」は「そのコマンド以前で最初に見つかった**ラベルに」
ジャンプ・コールする、という指定です。次のように書きます。
; =======================
	[jump label=****after]
***
**
	も
	[jump label=**after]
;**
	っ
**
	[l]
	ぷ
	[jump label=**before]
**
	＠[s]
**
****
	す
	[jump label=***before]
; =======================
この例では「すもぷぷぷ……」と文字が表示されます。
「**」とか「***」とかアスタリスクは二個以上の任意の数が使え、同じ数同士が対応するラベルとなります。
が、上記例で見るとおりあんまり複雑に使うと可読性が下がってしまう気がしますので、局所的な用途に限ったほうが良さげです。
</code></pre>
	<hr>
	<p><a id="pop_stack"></a></p>
	<h2><a id="pop_stack-コールスタック破棄" class="anchor" aria-hidden="true" href="#pop_stack-コールスタック破棄"></a><a href="#pop_stack">[pop_stack]
			コールスタック破棄</a></h2>
	<pre><code>コールスタックを一つ破棄する
※見通しが悪くなるため、本タグを極力使用しないコーディングを推奨します。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>clear</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>true：全て破棄する。空でもエラーを出さない<br>false：スタックを一つ破棄する。空の場合はエラーメッセージ＆アプリ停止</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="return"></a></p>
	<h2><a id="return-サブルーチンから戻る" class="anchor" aria-hidden="true" href="#return-サブルーチンから戻る"></a><a href="#return">[return]
			サブルーチンから戻る</a></h2>
	<pre><code>コールスタックに積まれているジャンプ先にジャンプする。
引数無し。
最後に積んだスタックを一つ破棄する。
</code></pre>
	<hr>
	<h1><a id="マクロ" class="anchor" aria-hidden="true" href="#マクロ"></a>マクロ</h1>
	<p><a id="bracket2macro"></a></p>
	<h2><a id="bracket2macro-括弧マクロの定義" class="anchor" aria-hidden="true" href="#bracket2macro-括弧マクロの定義"></a><a
		 href="#bracket2macro">[bracket2macro] 括弧マクロの定義</a></h2>
	<pre><code>引数textを持つマクロやタグを、任意の二つの文字を括弧とし、括弧で囲った記述で代用できるよう定義する
例 …… [bracket2macro name=title text=｟｠]
（訂正：「任意の二つの文字」は特定の半角文字じゃなくてもよいです）
※適用範囲について
　　本タグより前にロードされたスクリプトファイルには適用されません。
　　またスクリプトファイルに本タグが記述された場合、本タグより前に出現した半角文字にも適用されません。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>特定の文字</td>
				<td>括弧にする任意の二つの文字。<br>マクロに出来るのは英文字、空白、;、[、]、<em>、=、&amp;、｜、《、》以外のみ。<br>正規表現で言えば　/[\w\s;[]</em>=&amp;｜《》]/　以外。<br>一文字マクロや定義済みの括弧文字は使用できない。</td>
			</tr>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>定義済みのマクロ名</td>
				<td>半角文字に割り当てるマクロ名を指定。<br>組み込みタグか、[macro]による定義済みマクロ名で無ければならない。<br>組み込みタグやマクロは引数textだけを指定しても問題なく動作し、
					それを処理すること。渡される引数textは空文字の場合もある。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="break_macro"></a></p>
	<h2><a id="break_macro-マクロから脱出" class="anchor" aria-hidden="true" href="#break_macro-マクロから脱出"></a><a href="#break_macro">[break_macro]
			マクロから脱出</a></h2>
	<pre><code>マクロ内の途中で、マクロから脱出したい際に使用する。
引数無し。
</code></pre>
	<hr>
	<p><a id="char2macro"></a></p>
	<h2><a id="char2macro-一文字マクロの定義" class="anchor" aria-hidden="true" href="#char2macro-一文字マクロの定義"></a><a
		 href="#char2macro">[char2macro] 一文字マクロの定義</a></h2>
	<pre><code>引数無しのマクロやタグを、半角文字の記述で代用できるよう定義する
※適用範囲について
　　本タグより前にロードされたスクリプトファイルには適用されません。
　　またスクリプトファイルに本タグが記述された場合、本タグより前に出現した半角文字にも適用されません。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>char</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>特定の半角文字</td>
				<td>マクロにする半角文字。<br>マクロに出来るのは英文字、空白、;、[、]、<em>、=、&amp;、｜、《、》以外のみ。<br>正規表現で言えば　/[\w\s;[]</em>=&amp;｜《》]/　以外。<br>括弧文字や定義済みの一文字マクロは使用できない。</td>
			</tr>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>定義済みのマクロ名</td>
				<td>半角文字に割り当てるマクロ名を指定。<br>組み込みタグか、[macro]による定義済みマクロ名で無ければならない。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="endmacro"></a></p>
	<h2><a id="endmacro-マクロ定義の終了" class="anchor" aria-hidden="true" href="#endmacro-マクロ定義の終了"></a><a href="#endmacro">[endmacro]
			マクロ定義の終了</a></h2>
	<pre><code>[macro]と[endmacro]に囲まれた部分をマクロとして定義する。
引数無し。
</code></pre>
	<hr>
	<p><a id="macro"></a></p>
	<h2><a id="macro-マクロ定義の開始" class="anchor" aria-hidden="true" href="#macro-マクロ定義の開始"></a><a href="#macro">[macro]
			マクロ定義の開始</a></h2>
	<pre><code>[macro]と[endmacro]に囲まれた部分をマクロとして定義する。
定義しただけでは実行されない。

定義したマクロは既存のタグと同様に使用できる。
渡した引数は、マクロ側で「mp:」スコープにより参照できる。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>name</strong></td>
				<td><strong>y</strong></td>
				<td>マクロ名</td>
				<td>String</td>
				<td>既存のタグやマクロと重複しないマクロ名</td>
			</tr>
			<tr>
				<td>exist_err</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>false：定義済みの際、エラーを出さず何もしない</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="しおり" class="anchor" aria-hidden="true" href="#しおり"></a>しおり</h1>
	<p><a id="copybookmark"></a></p>
	<h2><a id="copybookmark-しおりの複写" class="anchor" aria-hidden="true" href="#copybookmark-しおりの複写"></a><a href="#copybookmark">[copybookmark]
			しおりの複写</a></h2>
	<pre><code>しおりデータを複写する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>from</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>数値</td>
				<td>複写元のしおり番号</td>
			</tr>
			<tr>
				<td><strong>to</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>数値</td>
				<td>複写先のしおり番号</td>
			</tr>
			<tr>
				<td>path</td>
				<td></td>
				<td>従来通り SharedObjectに保存</td>
				<td>フォルダパス</td>
				<td>指定した場合、複写先（to）のしおりをファイルとしてフォルダパス下に保存する。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="erasebookmark"></a></p>
	<h2><a id="erasebookmark-しおりの消去" class="anchor" aria-hidden="true" href="#erasebookmark-しおりの消去"></a><a
		 href="#erasebookmark">[erasebookmark] しおりの消去</a></h2>
	<pre><code>しおりデータを削除する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>place</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>数値</td>
				<td>処理対象のしおり番号</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="load"></a></p>
	<h2><a id="load-しおりの読込" class="anchor" aria-hidden="true" href="#load-しおりの読込"></a><a href="#load">[load]
			しおりの読込</a></h2>
	<pre><code>しおりデータを読み込み、スクリプト処理を再開する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>place</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>数値</td>
				<td>処理対象のしおり番号</td>
			</tr>
			<tr>
				<td>fn</td>
				<td>...</td>
				<td>...</td>
				<td>...</td>
				<td>ロード後最初にしたい共通処理をコールする（処理は[return]で終わらせる）。指定方法は[jump]と同様。<br>ただし指定する際、fnとlabelは両方指定しなければならない。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="record_place"></a></p>
	<h2><a id="record_place-セーブポイント指定" class="anchor" aria-hidden="true" href="#record_place-セーブポイント指定"></a><a
		 href="#record_place">[record_place] セーブポイント指定</a></h2>
	<pre><code>本タグの位置を、スクリプト読み込み時に再開する位置として設定する。
本タグで「しおりを挟み」、[save]タグで実際にデータをセーブするイメージ。
引数無し。

※マクロやサブルーチン内に記述された場合、最初に積まれたコールスタック位置をセーブポイントとする。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>全てのレイヤ</td>
				<td>保存対象レイヤ名（カンマ区切りで複数可能）</td>
				<td>しおりに状態を保存するレイヤ。Save/Load画面レイヤや設定画面レイヤなど、保存すべきでないレイヤを除いて指定すべき</td>
			</tr>
			<tr>
				<td>reset_sound</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>全てのサウンドを停止・再度再生開始するか</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="reload_script"></a></p>
	<h2><a id="reload_script-スクリプト再読込" class="anchor" aria-hidden="true" href="#reload_script-スクリプト再読込"></a><a
		 href="#reload_script">[reload_script] スクリプト再読込</a></h2>
	<pre><code>現在処理中のスクリプトをリロードする。
実行位置は[record_place]によるセーブポイントまで戻って再開する。
引数無し。
※スクリプトを大幅に変えた後だと、正常に再開できない場合があります。
</code></pre>
	<hr>
	<p><a id="save"></a></p>
	<h2><a id="save-しおりの保存" class="anchor" aria-hidden="true" href="#save-しおりの保存"></a><a href="#save">[save]
			しおりの保存</a></h2>
	<pre><code>しおりデータを保存する。
読み込み時に再開するスクリプトの位置は最後に[record_place]をコールした位置。

[record_place]がゲーム状態（レイヤ状態など）をバッファに退避し、
[save]は指定しおりに書き出す機能。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>place</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>数値</td>
				<td>処理対象のしおり番号</td>
			</tr>
			<tr>
				<td>path</td>
				<td></td>
				<td>従来通り SharedObjectに保存</td>
				<td>フォルダパス</td>
				<td>指定した場合、しおりをファイルとしてフォルダパス下に保存する。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="画面揺らし" class="anchor" aria-hidden="true" href="#画面揺らし"></a>画面揺らし</h1>
	<p><a id="quake"></a></p>
	<h2><a id="quake-画面を揺らす" class="anchor" aria-hidden="true" href="#quake-画面を揺らす"></a><a href="#quake">[quake]
			画面を揺らす</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="stop_quake"></a></p>
	<h2><a id="stop_quake-画面揺らし中断" class="anchor" aria-hidden="true" href="#stop_quake-画面揺らし中断"></a><a href="#stop_quake">[stop_quake]
			画面揺らし中断</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="wq"></a></p>
	<h2><a id="wq-画面揺らし終了待ち" class="anchor" aria-hidden="true" href="#wq-画面揺らし終了待ち"></a><a href="#wq">[wq]
			画面揺らし終了待ち</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="システム" class="anchor" aria-hidden="true" href="#システム"></a>システム</h1>
	<p><a id="close"></a></p>
	<h2><a id="close-アプリの終了" class="anchor" aria-hidden="true" href="#close-アプリの終了"></a><a href="#close">[close]
			アプリの終了</a></h2>
	<pre><code>アプリケーションを終了する
引数無し。
※Flash 上では動作しません。タグを呼んでも何もしません。
</code></pre>
	<hr>
	<p><a id="loadplugin"></a></p>
	<h2><a id="loadplugin-プラグインの読み込み" class="anchor" aria-hidden="true" href="#loadplugin-プラグインの読み込み"></a><a
		 href="#loadplugin">[loadplugin] プラグインの読み込み</a></h2>
	<pre><code>プラグインとして読み込む

《注意》立ち絵や一枚絵を表示する目的にはこの命令を推奨しません。その目的を満たすタグは[lay]です。
プラグインには裏表ページの概念がなかったりするためです

※動的ライブラリの作り方については「プラグインの自作」をご覧下さい。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>fn</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>ファイル名</td>
				<td>読み込むプラグインのファイル名<br>[loadplugin fn=plg*]のようにワイルドカードをサポート。<br>マッチするプラグインを順不同に読み込む。読み込み済みなら無視。<br>（拡張子はswfのみ）（ワイルドカードは後方のみ）</td>
			</tr>
			<tr>
				<td>index</td>
				<td></td>
				<td>最前面※</td>
				<td>0〜</td>
				<td>重なり順を指定する。<br>※最前面とは、Flashのstage.addChildにおける重なり順</td>
			</tr>
			<tr>
				<td>join</td>
				<td></td>
				<td>true</td>
				<td>Boolean</td>
				<td>trueで読み込みを待って次のタグへ進む。</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="naviate_to"></a></p>
	<h2><a id="naviate_to-ｕｒｌを開く" class="anchor" aria-hidden="true" href="#naviate_to-ｕｒｌを開く"></a><a href="#naviate_to">[naviate_to]
			ＵＲＬを開く</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>url</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>URL文字列</td>
				<td>開くURL</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="snapshot"></a></p>
	<h2><a id="snapshot-スナップショット" class="anchor" aria-hidden="true" href="#snapshot-スナップショット"></a><a href="#snapshot">[snapshot]
			スナップショット</a></h2>
	<pre><code>アプリ表示部分全体を画像として保存する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer</td>
				<td></td>
				<td>全てのレイヤ</td>
				<td>レイヤ名（半角カンマ区切りで複数レイヤを指定可能）</td>
				<td>「plg:プラグイン名」と記述する事でプラグインも指定できる。</td>
			</tr>
			<tr>
				<td>page</td>
				<td></td>
				<td>fore</td>
				<td>fore、back</td>
				<td>ページの裏表</td>
			</tr>
			<tr>
				<td>fn</td>
				<td></td>
				<td>snapshot</td>
				<td>String</td>
				<td>※保存するファイル名（拡張子を除く）</td>
			</tr>
			<tr>
				<td>format</td>
				<td></td>
				<td>jpg</td>
				<td>png、jpg</td>
				<td>保存する画像フォーマット</td>
			</tr>
			<tr>
				<td>quality</td>
				<td></td>
				<td>90</td>
				<td>1〜100</td>
				<td>jpg保存する際の画質。大きいと画質が高いが処理が遅くなる。</td>
			</tr>
			<tr>
				<td>width</td>
				<td></td>
				<td>アプリ表示部分の横サイズ</td>
				<td>1〜</td>
				<td>保存する画像の横ドットサイズ。<br>元のサイズと異なる場合は拡大・縮小される。</td>
			</tr>
			<tr>
				<td>height</td>
				<td></td>
				<td>アプリ表示部分の縦サイズ</td>
				<td>1〜</td>
				<td>保存する画像の縦ドットサイズ。<br>元のサイズと異なる場合は拡大・縮小される。</td>
			</tr>
			<tr>
				<td>smoothing</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>拡大・縮小保存される場合、スムージングするか</td>
			</tr>
			<tr>
				<td>pathdlg</td>
				<td></td>
				<td>false</td>
				<td>Boolean</td>
				<td>保存場所をGUIで選べるダイアログを表示するか</td>
			</tr>
			<tr>
				<td>b_color</td>
				<td></td>
				<td>config.anprjで指定した背景色</td>
				<td>色指定。0xFF000000（黒）など<br>16進数では透過2桁＋赤2桁＋緑2桁＋青2桁で指定</td>
				<td>テキスト背後の矩形色。pngで 0x0 にすると透過する。<br>透過しない黒は 0xFF000000</td>
			</tr>
		</tbody>
	</table>
	<p>※fnを「app-storage:」で始まるファイル名にするとセーブデータと同じフォルダに保存します。</p>
	<table>
		<thead>
			<tr>
				<th>OS</th>
				<th>Path</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>Mac OS X</td>
				<td>HD/Users/[user]/Library/Preferences/[id]/</td>
			</tr>
			<tr>
				<td>Windows 7</td>
				<td>C:\Users[user]\AppData\Roaming[id]\</td>
			</tr>
			<tr>
				<td>Linux</td>
				<td>/home/[user]/.appdata/[id]/Local Store</td>
			</tr>
			<tr>
				<td>　　[user]はインストールしたユーザー名、<br></td>
				<td></td>
			</tr>
			<tr>
				<td>　　[id]はアプリ固有のIDです。<br></td>
				<td></td>
			</tr>
			<tr>
				<td>参考：アプリケーション記憶領域ディレクトリ<br></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<br>
	<br>
	※fnを「ss:/」で始めると、セーブデータファイル内部（SharedObject）に保存します。（例　ss:/yyy）
	　保存した画像は、画像レイヤやボタンに画像として表示出来ます。（例　fn="ss:/yyy"）
	<hr>
	<p><a id="title"></a></p>
	<h2><a id="title-タイトル指定" class="anchor" aria-hidden="true" href="#title-タイトル指定"></a><a href="#title">[title]
			タイトル指定</a></h2>
	<pre><code>アプリウインドウのタイトル文字列を設定する。
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>タイトル文字列</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="toggle_full_screen"></a></p>
	<h2><a id="toggle_full_screen-全画面状態切替" class="anchor" aria-hidden="true" href="#toggle_full_screen-全画面状態切替"></a><a
		 href="#toggle_full_screen">[toggle_full_screen] 全画面状態切替</a></h2>
	<pre><code>呼び出す度にアプリの全画面／ウインドウモードを切り替えます。
</code></pre>
	<p>現在の状態は文字列変数「tmp:const.flash.display.Stage.displayState」を参照（→定数一覧）</p>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>fn</td>
				<td></td>
				<td>イベント登録せずモード切替</td>
				<td>イベントのキー名※1</td>
				<td>（Flash動作時のみ使用）イベントを発生させるトリガーイベント。<br>key属性の値は[event]を参照</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="window"></a></p>
	<h2><a id="window-アプリウインドウ設定" class="anchor" aria-hidden="true" href="#window-アプリウインドウ設定"></a><a href="#window">[window]
			アプリウインドウ設定</a></h2>
	<pre><code>ゲームアプリのウインドウサイズや位置などを変更する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>width</td>
				<td></td>
				<td>現在値</td>
				<td>1〜</td>
				<td>アプリウインドウの横幅を指定</td>
			</tr>
			<tr>
				<td>height</td>
				<td></td>
				<td>現在値</td>
				<td>1〜</td>
				<td>アプリウインドウの高さを指定</td>
			</tr>
			<tr>
				<td>framerate</td>
				<td></td>
				<td>現在値</td>
				<td>1〜</td>
				<td>アプリ全体のフレームレートを変更</td>
			</tr>
			<tr>
				<td>centering</td>
				<td></td>
				<td>何もしない</td>
				<td>Boolean</td>
				<td>trueを指定すると、アプリウインドウをデスクトップの中央に移動する</td>
			</tr>
			<tr>
				<td>x</td>
				<td></td>
				<td>何もしない</td>
				<td>画面左上を(0, 0)とする座標</td>
				<td>デスクトップにおけるアプリウインドウの横位置を指定</td>
			</tr>
			<tr>
				<td>y</td>
				<td></td>
				<td>何もしない</td>
				<td>(↑と同じ)</td>
				<td>デスクトップにおけるアプリウインドウの縦位置を指定</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<h1><a id="デバッグその他" class="anchor" aria-hidden="true" href="#デバッグその他"></a>デバッグ・その他</h1>
	<p><a id="dump_lay"></a></p>
	<h2><a id="dump_lay-レイヤのダンプ" class="anchor" aria-hidden="true" href="#dump_lay-レイヤのダンプ"></a><a href="#dump_lay">[dump_lay]
			レイヤのダンプ</a></h2>
	<pre><code>レイヤの内容をデバッグ表示する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>layer n 全てのレイヤ レイヤ名（半角カンマ区切りで複数レイヤを指定可能） 「plg:プラグイン名」と記述する事でプラグインも指定できる。</td>
				<td></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="dump_val"></a></p>
	<h2><a id="dump_val-変数のダンプ" class="anchor" aria-hidden="true" href="#dump_val-変数のダンプ"></a><a href="#dump_val">[dump_val]
			変数のダンプ</a></h2>
	<pre><code>変数の内容をデバッグ表示する
引数無し。
</code></pre>
	<hr>
	<p><a id="dump_script"></a></p>
	<h2><a id="dump_script-スクリプトのダンプ" class="anchor" aria-hidden="true" href="#dump_script-スクリプトのダンプ"></a><a
		 href="#dump_script">[dump_script] スクリプトのダンプ</a></h2>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>xxxxxx</td>
				<td><strong>y</strong></td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="dump_stack"></a></p>
	<h2><a id="dump_stack-スタックのダンプ" class="anchor" aria-hidden="true" href="#dump_stack-スタックのダンプ"></a><a href="#dump_stack">[dump_stack]
			スタックのダンプ</a></h2>
	<pre><code>[call]等によるコールスタックの内容をデバッグ表示する
引数無し。
</code></pre>
	<hr>
	<p><a id="log"></a></p>
	<h2><a id="log-ログ出力" class="anchor" aria-hidden="true" href="#log-ログ出力"></a><a href="#log">[log] ログ出力</a></h2>
	<pre><code>引数をデスクトップにテキスト出力する（追記ではなく上書き。追記する。出力日時・分・スクリプト名や行番号・OSやプロジェクト名も出力）
</code></pre>
	<hr>
	<p><a id="stats"></a></p>
	<h2><a id="stats-パフォーマンス表示" class="anchor" aria-hidden="true" href="#stats-パフォーマンス表示"></a><a href="#stats">[stats]
			パフォーマンス表示</a></h2>
	<pre><code>FPSやメモリ使用量をチェックするStatsを表示する。（見方）。
指定しない場合はデバッグ表示[trace]を右にどかす
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>left</td>
				<td></td>
				<td>0</td>
				<td>画面左上を(0, 0)とする座標</td>
				<td>表示の横位置</td>
			</tr>
			<tr>
				<td>top</td>
				<td></td>
				<td>(↑と同じ)</td>
				<td>(↑と同じ)</td>
				<td>表示の縦位置</td>
			</tr>
		</tbody>
	</table>
	<hr>
	<p><a id="trace"></a></p>
	<h2><a id="trace-デバッグ表示へ出力" class="anchor" aria-hidden="true" href="#trace-デバッグ表示へ出力"></a><a href="#trace">[trace]
			デバッグ表示へ出力</a></h2>
	<pre><code>引数をデバッグ表示する
</code></pre>
	<table>
		<thead>
			<tr>
				<th>属性</th>
				<th>必須</th>
				<th>省略時</th>
				<th>値域・型</th>
				<th>コメント</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td><strong>text</strong></td>
				<td><strong>y</strong></td>
				<td></td>
				<td>String</td>
				<td>デバッグ表示する値</td>
			</tr>
		</tbody>
	</table>

</body>

</html>